;--------------------------------------------------------------
; Potato1.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 || Potato1.p by Auroxsus
;    2 || French Fry Productions
;    3 || Description: { & } testing
;    4 ||-----------------------------------------------------------
;    5 
;    6 POTATO
;    7    VAR INT x, INT y.
; **** =========
; **** PROGRAM module (   6)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0010
                       PUSHA     SB:0D0
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE

PROGRAMBODY0010        EQU       *
;    8 
;    9    x = 101. y = 0.
; **** assignment statement (   9)
                       PUSHA     SB:0D28
                       PUSH      #0D101
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
;   10 
;   11 { ((x >= 0) AND (y != 1)) } { TRUE } { NOT FALSE }
; **** assignment statement (   9)
                       PUSHA     SB:0D29
                       PUSH      #0D0
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; ****   11: { assertion }
                       PUSH      SB:0D28
                       PUSH      #0D0
                       CMPI      
                       JMPGE     T0020
                       PUSH      #0X0000
                       JMP       E0030
T0020                  PUSH      #0XFFFF
E0030                  EQU       *
                       PUSH      SB:0D29
                       PUSH      #0D1
                       CMPI      
                       JMPNE     T0040
                       PUSH      #0X0000
                       JMP       E0050
T0040                  PUSH      #0XFFFF
E0050                  EQU       *
                       AND       
                       SETT      
                       JMPT      E0060
                       PUSH      #0D11
                       PUSH      #0D1
                       JMP       HANDLERUNTIMEERROR
E0060                  EQU       *
                       DISCARD   #0D1
; ****   11: { assertion }
                       PUSH      #0XFFFF
                       SETT      
                       JMPT      E0070
                       PUSH      #0D11
                       PUSH      #0D1
                       JMP       HANDLERUNTIMEERROR
E0070                  EQU       *
                       DISCARD   #0D1
;   12 
; ****   11: { assertion }
;   13    y = x + 1.
                       PUSH      #0X0000
                       NOT       
                       SETT      
                       JMPT      E0080
                       PUSH      #0D11
                       PUSH      #0D1
                       JMP       HANDLERUNTIMEERROR
E0080                  EQU       *
                       DISCARD   #0D1
; **** assignment statement (  13)
                       PUSHA     SB:0D29
;   14 
;   15 { x == y-1 } { y < x }
                       PUSH      SB:0D28
                       PUSH      #0D1
                       ADDI      
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; ****   15: { assertion }
                       PUSH      SB:0D28
                       PUSH      SB:0D29
                       PUSH      #0D1
                       SUBI      
                       CMPI      
                       JMPE      T0090
                       PUSH      #0X0000
                       JMP       E0100
T0090                  PUSH      #0XFFFF
E0100                  EQU       *
                       SETT      
                       JMPT      E0110
                       PUSH      #0D15
                       PUSH      #0D1
                       JMP       HANDLERUNTIMEERROR
E0110                  EQU       *
                       DISCARD   #0D1
; ****   15: { assertion }
;   16 
                       PUSH      SB:0D29
;   17 COOKEDPOTATO
;   18 
                       PUSH      SB:0D28
                       CMPI      
                       JMPL      T0120
                       PUSH      #0X0000
                       JMP       E0130
T0120                  PUSH      #0XFFFF
E0130                  EQU       *
                       SETT      
                       JMPT      E0140
                       PUSH      #0D15
                       PUSH      #0D1
                       JMP       HANDLERUNTIMEERROR
E0140                  EQU       *
                       DISCARD   #0D1
                       RETURN    
; **** =========
; **** END (  17)
; **** =========

;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D30
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D48
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE

;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       DS        "Normal program termination"
                       RW        0D1                  ; x
                       RW        0D1                  ; y
                       DS        "Run-time error #"
                       DS        " near line #"

;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future POTATO syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words

;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
