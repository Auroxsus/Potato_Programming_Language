;--------------------------------------------------------------
; Potato1.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 || Potato.p by Auroxsus
;    2 || French Fry Productions
;    3 || Description: testing complex subprogram
;    4 ||-----------------------------------------------------------
;    5 
;    6 VAR INT x, INT y.
;    7 VAR BOOL z.
;    8 
;    9 PROCEDURE PIN0
;   10    FRY "PIN0()",PEEL.
; **** =========
; **** PROCEDURE module (   9)
; **** =========
PIN0                   EQU       *
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D4                 ; n = 0
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0010
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D4
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0010         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** PRINT statement (  10)
;   11    RETURN.
                       PUSHA     SB:0D3
                       SVC       #SVC_WRITE_STRING
;   12 COOKEDPOTATO
                       SVC       #SVC_WRITE_ENDL
;   13 
;   14 PROCEDURE PIN1(INT x)
; **** RETURN statement (  11)
                       RETURN    
                       RETURN    

; **** =========
; **** END (  12)
; **** =========
; **** =========
; **** PROCEDURE module (  14)
; **** =========
PIN1                   EQU       *
;   15    FRY "PIN1(",x,")",PEEL.
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D6                 ; n = 1
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0020
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D6
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0020         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** PRINT statement (  15)
                       PUSHA     SB:0D11
                       SVC       #SVC_WRITE_STRING
                       PUSH      FB:0D0
                       SVC       #SVC_WRITE_INTEGER
;   16 ||   RETURN.
                       PUSHA     SB:0D18
                       SVC       #SVC_WRITE_STRING
;   17 COOKEDPOTATO
;   18 
;   19 PROCEDURE PIN2(INT x,IN INT y)
                       SVC       #SVC_WRITE_ENDL
                       RETURN    

; **** =========
; **** END (  17)
; **** =========
; **** =========
; **** PROCEDURE module (  19)
; **** =========
PIN2                   EQU       *
;   20    FRY "PIN2(",x,",",y,")",PEEL.
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D8                 ; n = 2
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0030
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D8
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0030         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** PRINT statement (  20)
                       PUSHA     SB:0D21
                       SVC       #SVC_WRITE_STRING
                       PUSH      FB:0D0
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D28
                       SVC       #SVC_WRITE_STRING
                       PUSH      FB:0D1
                       SVC       #SVC_WRITE_INTEGER
;   21 COOKEDPOTATO
                       PUSHA     SB:0D31
                       SVC       #SVC_WRITE_STRING
;   22 
;   23 PROCEDURE POUT1(OUT BOOL b)
                       SVC       #SVC_WRITE_ENDL
                       RETURN    

; **** =========
; **** END (  21)
; **** =========
; **** =========
; **** PROCEDURE module (  23)
; **** =========
POUT1                  EQU       *
;   24    FRY "POUT1",PEEL.
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D8                 ; n = 2
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0040
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D8
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0040         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** PRINT statement (  24)
;   25    b = true.
                       PUSHA     SB:0D34
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
;   26 COOKEDPOTATO
; **** assignment statement (  25)
                       PUSHA     FB:0D1
;   27 
;   28 PROCEDURE POUT2(OUT INT x, OUT INT y)
                       PUSH      #0XFFFF
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
                       RETURN    

; **** =========
; **** END (  26)
; **** =========
; **** =========
; **** PROCEDURE module (  28)
; **** =========
POUT2                  EQU       *
;   29    FRY "POUT2",PEEL.
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D12                ; n = 4
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0050
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D12
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0050         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** PRINT statement (  29)
;   30    x = 2.
                       PUSHA     SB:0D41
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
;   31    y = 2*x.
; **** assignment statement (  30)
                       PUSHA     FB:0D1
                       PUSH      #0D2
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** assignment statement (  31)
                       PUSHA     FB:0D3
;   32    RETURN.
                       PUSH      #0D2
;   33 COOKEDPOTATO
                       PUSH      FB:0D1
                       MULI      
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
;   34 
;   35 PROCEDURE PIN1R(INT x)
; **** RETURN statement (  32)
                       RETURN    
                       RETURN    

; **** =========
; **** END (  33)
; **** =========
; **** =========
; **** PROCEDURE module (  35)
; **** =========
PIN1R                  EQU       *
;   36    IF ( x > 0 ) 
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D6                 ; n = 1
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0060
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D6
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0060         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** IF statement (  36)
                       PUSH      FB:0D0
;   37       FRY x,PEEL.
                       PUSH      #0D0
                       CMPI      
                       JMPG      T0070
                       PUSH      #0X0000
                       JMP       E0080
T0070                  PUSH      #0XFFFF
E0080                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0100
; **** PRINT statement (  37)
;   38       CALL PIN1R(x-1).
                       PUSH      FB:0D0
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** CALL statement (  38)
;   39    COOKEDPOTATO
                       PUSH      FB:0D0
                       PUSH      #0D1
;   40 COOKEDPOTATO
                       SUBI      
;   41 
;   42 PROCEDURE PIN1OUT1(IN INT x,OUT INT y)
                       PUSHFB    
                       CALL      PIN1R
                       POPFB     
                       DISCARD   #0D1
                       JMP       E0090
I0100                  EQU       *
E0090                  EQU       *
                       RETURN    

; **** =========
; **** END (  40)
; **** =========
; **** =========
; **** PROCEDURE module (  42)
; **** =========
PIN1OUT1               EQU       *
;   43    FRY "PIN1OUT1",PEEL.
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D10                ; n = 3
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0110
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D10
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0110         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** PRINT statement (  43)
;   44    y = x.
                       PUSHA     SB:0D48
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
;   45 COOKEDPOTATO
; **** assignment statement (  44)
                       PUSHA     FB:0D2
;   46 
;   47 PROCEDURE PIN1OUT1R(INT x,OUT INT y)
                       PUSH      FB:0D0
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
                       RETURN    

; **** =========
; **** END (  45)
; **** =========
; **** =========
; **** PROCEDURE module (  47)
; **** =========
PIN1OUT1R              EQU       *
;   48    IF ( x == 0 ) 
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D10                ; n = 3
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0120
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D10
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0120         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** IF statement (  48)
                       PUSH      FB:0D0
;   49       y = 42.
                       PUSH      #0D0
                       CMPI      
                       JMPE      T0130
                       PUSH      #0X0000
                       JMP       E0140
T0130                  PUSH      #0XFFFF
E0140                  EQU       *
;   50    ELSE
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0160
; **** assignment statement (  49)
                       PUSHA     FB:0D2
;   51       CALL PIN1OUT1R(x-1,y).
                       PUSH      #0D42
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
                       JMP       E0150
I0160                  EQU       *
; **** CALL statement (  51)
                       PUSH      FB:0D0
;   52    COOKEDPOTATO
                       PUSH      #0D1
                       SUBI      
                       PUSHA     FB:0D2
;   53 COOKEDPOTATO
                       PUSH      #0X0000
;   54 
;   55 PROCEDURE PIO1(IO INT x)
                       PUSHFB    
                       CALL      PIN1OUT1R
                       POPFB     
                       POP       @SP:0D1
                       DISCARD   #0D1
                       DISCARD   #0D1
E0150                  EQU       *
                       RETURN    

; **** =========
; **** END (  53)
; **** =========
; **** =========
; **** PROCEDURE module (  55)
; **** =========
PIO1                   EQU       *
;   56    FRY "PIO1",PEEL.
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D8                 ; n = 2
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0170
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D8
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0170         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** PRINT statement (  56)
;   57    x = x+2.
                       PUSHA     SB:0D58
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
; **** assignment statement (  57)
                       PUSHA     FB:0D1
;   58 COOKEDPOTATO
                       PUSH      FB:0D1
;   59 
;   60 PROCEDURE PIO2(IO INT x1,IO INT x2)
                       PUSH      #0D2
                       ADDI      
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
                       RETURN    

; **** =========
; **** END (  58)
; **** =========
; **** =========
; **** PROCEDURE module (  60)
; **** =========
PIO2                   EQU       *
;   61    VAR INT T.
;   62 
;   63    FRY "PIO2",PEEL.
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D12                ; n = 4
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D2                 ; m = 1
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0180
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D12
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0180         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** PRINT statement (  63)
;   64    T = x1.
                       PUSHA     SB:0D64
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
;   65    x1 = x2.
; **** assignment statement (  64)
                       PUSHA     FB:0D6
                       PUSH      FB:0D1
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
;   66    x2 = T.
; **** assignment statement (  65)
                       PUSHA     FB:0D1
                       PUSH      FB:0D3
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
;   67 COOKEDPOTATO
; **** assignment statement (  66)
                       PUSHA     FB:0D3
;   68 
;   69 PROCEDURE PREF2(REF INT i,REF BOOL x)
                       PUSH      FB:0D6
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
                       RETURN    

; **** =========
; **** END (  67)
; **** =========
; **** =========
; **** PROCEDURE module (  69)
; **** =========
PREF2                  EQU       *
;   70    FRY "PREF2 (i,x) = (",i,",",x,")",PEEL.
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D8                 ; n = 2
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0190
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D8
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0190         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** PRINT statement (  70)
                       PUSHA     SB:0D70
                       SVC       #SVC_WRITE_STRING
                       PUSH      @FB:0D0
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D87
                       SVC       #SVC_WRITE_STRING
                       PUSH      @FB:0D1
                       SVC       #SVC_WRITE_BOOLEAN
;   71    x = NOT x.
                       PUSHA     SB:0D90
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
; **** assignment statement (  71)
                       PUSHA     @FB:0D1
;   72    RETURN.
;   73 COOKEDPOTATO
                       PUSH      @FB:0D1
                       NOT       
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
;   74 
;   75 POTATO
; **** RETURN statement (  72)
;   76    VAR INT i.
                       RETURN    
                       RETURN    

; **** =========
; **** END (  73)
; **** =========
; **** =========
; **** PROGRAM module (  75)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0200
                       PUSHA     SB:0D93
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE

PROGRAMBODY0200        EQU       *
;   77 
;   78    CALL PIN0.
;   79 
;   80    CALL PIN1(1).
; **** CALL statement (  78)
                       PUSHFB    
                       CALL      PIN0
                       POPFB     
; **** CALL statement (  80)
;   81 
;   82    x = 2.
                       PUSH      #0D1
                       PUSHFB    
                       CALL      PIN1
                       POPFB     
                       DISCARD   #0D1
;   83    CALL PIN2(x,x+2).
; **** assignment statement (  82)
                       PUSHA     SB:0D0
                       PUSH      #0D2
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** CALL statement (  83)
                       PUSH      SB:0D0
;   84 
                       PUSH      SB:0D0
;   85    CALL POUT1(z).
                       PUSH      #0D2
                       ADDI      
                       PUSHFB    
                       CALL      PIN2
                       POPFB     
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** CALL statement (  85)
;   86    FRY "z = ",z,PEEL.
                       PUSHA     SB:0D2
                       PUSH      #0X0000
                       PUSHFB    
                       CALL      POUT1
                       POPFB     
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** PRINT statement (  86)
                       PUSHA     SB:0D122
                       SVC       #SVC_WRITE_STRING
;   87 
;   88    CALL POUT2(x,y).
                       PUSH      SB:0D2
                       SVC       #SVC_WRITE_BOOLEAN
                       SVC       #SVC_WRITE_ENDL
; **** CALL statement (  88)
;   89    FRY "x = ",x,", y = ",y,PEEL.
                       PUSHA     SB:0D0
                       PUSH      #0X0000
                       PUSHA     SB:0D1
                       PUSH      #0X0000
                       PUSHFB    
                       CALL      POUT2
                       POPFB     
                       POP       @SP:0D1
                       DISCARD   #0D1
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** PRINT statement (  89)
                       PUSHA     SB:0D128
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D0
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D134
                       SVC       #SVC_WRITE_STRING
;   90 
;   91    FRY "PIN1R(3)",PEEL.
                       PUSH      SB:0D1
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  91)
;   92    CALL PIN1R(3).
                       PUSHA     SB:0D142
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
; **** CALL statement (  92)
;   93 
;   94    x = 1.
                       PUSH      #0D3
                       PUSHFB    
                       CALL      PIN1R
                       POPFB     
                       DISCARD   #0D1
;   95    CALL PIN1OUT1(x,y).
; **** assignment statement (  94)
                       PUSHA     SB:0D0
                       PUSH      #0D1
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** CALL statement (  95)
;   96    FRY "y = ",y,PEEL.
                       PUSH      SB:0D0
                       PUSHA     SB:0D1
                       PUSH      #0X0000
                       PUSHFB    
                       CALL      PIN1OUT1
                       POPFB     
                       POP       @SP:0D1
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** PRINT statement (  96)
                       PUSHA     SB:0D152
                       SVC       #SVC_WRITE_STRING
;   97 
;   98    FRY "PIN1OUT1R",PEEL.
                       PUSH      SB:0D1
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  98)
;   99    CALL PIN1OUT1R(3,y).
                       PUSHA     SB:0D158
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
; **** CALL statement (  99)
;  100    FRY "y = ",y,PEEL.
                       PUSH      #0D3
                       PUSHA     SB:0D1
                       PUSH      #0X0000
                       PUSHFB    
                       CALL      PIN1OUT1R
                       POPFB     
                       POP       @SP:0D1
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** PRINT statement ( 100)
                       PUSHA     SB:0D169
                       SVC       #SVC_WRITE_STRING
;  101 
;  102    y = 7.
                       PUSH      SB:0D1
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
;  103    CALL PIO1(y).
; **** assignment statement ( 102)
                       PUSHA     SB:0D1
                       PUSH      #0D7
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** CALL statement ( 103)
;  104    FRY "y = ",y,PEEL.
                       PUSHA     SB:0D1
                       PUSH      @SP:0D0
                       PUSHFB    
                       CALL      PIO1
                       POPFB     
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** PRINT statement ( 104)
                       PUSHA     SB:0D175
                       SVC       #SVC_WRITE_STRING
;  105 
;  106    x = 3. y = 7.
                       PUSH      SB:0D1
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** assignment statement ( 106)
                       PUSHA     SB:0D0
                       PUSH      #0D3
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
;  107    FRY "(x,y) = (",x,",",y,")",PEEL.
; **** assignment statement ( 106)
                       PUSHA     SB:0D1
                       PUSH      #0D7
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** PRINT statement ( 107)
                       PUSHA     SB:0D181
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D0
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D192
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D1
                       SVC       #SVC_WRITE_INTEGER
;  108    CALL PIO2(x,y).
                       PUSHA     SB:0D195
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
; **** CALL statement ( 108)
;  109    FRY "(x,y) = (",x,",",y,")",PEEL.
                       PUSHA     SB:0D0
                       PUSH      @SP:0D0
                       PUSHA     SB:0D1
                       PUSH      @SP:0D0
                       PUSHFB    
                       CALL      PIO2
                       POPFB     
                       POP       @SP:0D1
                       DISCARD   #0D1
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** PRINT statement ( 109)
                       PUSHA     SB:0D198
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D0
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D209
                       SVC       #SVC_WRITE_STRING
                       PUSH      SB:0D1
                       SVC       #SVC_WRITE_INTEGER
;  110 
;  111    FOR (i = 1. i < 2. i = i + 1.)
                       PUSHA     SB:0D212
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
; **** FOR statement ( 111)
; **** assignment statement ( 111)
                       PUSHA     SB:0D121
                       PUSH      #0D1
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
                       PUSH      #0X0000              ; doS3 := FALSE
                       JMP       S30220               ; doS3
E20210                 EQU       *
                       PUSH      SB:0D121
                       PUSH      #0D2
                       CMPI      
                       JMPL      T0250
                       PUSH      #0X0000
                       JMP       E0260
T0250                  PUSH      #0XFFFF
E0260                  EQU       *
                       SETT                           ; e2
                       DISCARD   #0D1                 ; (empty)
                       JMPT      C0230                ; (empty)
                       JMP       E0240                ; (empty)
S30220                 EQU       *                    ; doS3
                       SETT                           ; doS3
                       DISCARD   #0D1                 ; (empty)
                       JMPNT     E20210               ; (empty)
; **** assignment statement ( 111)
                       PUSHA     SB:0D121
;  112       CALL PREF2(i,z).
                       PUSH      SB:0D121
                       PUSH      #0D1
                       ADDI      
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
                       JMP       E20210               ; (empty)
C0230                  EQU       *
; **** CALL statement ( 112)
;  113    COOKEDPOTATO
                       PUSHA     SB:0D121
                       PUSHA     SB:0D2
;  114 
;  115 COOKEDPOTATO
;  116 
                       PUSHFB    
                       CALL      PREF2
                       POPFB     
                       DISCARD   #0D1
                       DISCARD   #0D1
                       PUSH      #0XFFFF              ; doS3 := TRUE
                       JMP       S30220               ; doS3
E0240                  EQU       *
                       RETURN    
; **** =========
; **** END ( 115)
; **** =========

;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D215
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D233
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE

;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       RW        0D1                  ; x
                       RW        0D1                  ; y
                       RW        0D1                  ; z
                       DS        "PIN0()"
                       DS        "PIN1("
                       DS        ")"
                       DS        "PIN2("
                       DS        ","
                       DS        ")"
                       DS        "POUT1"
                       DS        "POUT2"
                       DS        "PIN1OUT1"
                       DS        "PIO1"
                       DS        "PIO2"
                       DS        "PREF2 (i,x) = ("
                       DS        ","
                       DS        ")"
                       DS        "Normal program termination"
                       RW        0D1                  ; i
                       DS        "z = "
                       DS        "x = "
                       DS        ", y = "
                       DS        "PIN1R(3)"
                       DS        "y = "
                       DS        "PIN1OUT1R"
                       DS        "y = "
                       DS        "y = "
                       DS        "(x,y) = ("
                       DS        ","
                       DS        ")"
                       DS        "(x,y) = ("
                       DS        ","
                       DS        ")"
                       DS        "Run-time error #"
                       DS        " near line #"

;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future POTATO syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words

;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
