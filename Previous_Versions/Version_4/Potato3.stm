;--------------------------------------------------------------
; potato3.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 || Potato3.cpp by Auroxsus
;    2 || French Fry Productions
;    3 || Description: If/elif/else and nested If/else
;    4 ||-----------------------------------------------------------
;    5 
;    6 POTATO
;    7    VAR x INT, y INT.
; **** =========
; **** PROGRAM module (   6)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0010
                       PUSHA     SB:0D0
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE

PROGRAMBODY0010        EQU       *
;    8 
;    9    INPUT "x? " x.
;   10    INPUT "y? " y.
; **** INPUT statement (   9)
                       PUSHA     SB:0D30
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D28
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
;   11 
;   12    IF ( x < y ) 
; **** INPUT statement (  10)
                       PUSHA     SB:0D35
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D29
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** IF statement (  12)
                       PUSH      SB:0D28
;   13       FRy "x  < y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPL      T0020
                       PUSH      #0X0000
                       JMP       E0030
T0020                  PUSH      #0XFFFF
E0030                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0050
; **** PRINT statement (  13)
;   14    COOKEDPOTATO
                       PUSHA     SB:0D40
                       SVC       #SVC_WRITE_STRING
;   15 
;   16    IF ( x != y ) 
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0040
I0050                  EQU       *
E0040                  EQU       *
; **** IF statement (  16)
                       PUSH      SB:0D28
;   17       FRy "x != y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPNE     T0060
                       PUSH      #0X0000
                       JMP       E0070
T0060                  PUSH      #0XFFFF
E0070                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0090
; **** PRINT statement (  17)
;   18    COOKEDPOTATO
                       PUSHA     SB:0D48
                       SVC       #SVC_WRITE_STRING
;   19 
;   20    IF ( x <> y ) 
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0080
I0090                  EQU       *
E0080                  EQU       *
; **** IF statement (  20)
                       PUSH      SB:0D28
;   21       FRy "x <> y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPNE     T0100
                       PUSH      #0X0000
                       JMP       E0110
T0100                  PUSH      #0XFFFF
E0110                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0130
; **** PRINT statement (  21)
;   22    COOKEDPOTATO
                       PUSHA     SB:0D56
                       SVC       #SVC_WRITE_STRING
;   23 
;   24    IF ( x < y ) 
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0120
I0130                  EQU       *
E0120                  EQU       *
; **** IF statement (  24)
                       PUSH      SB:0D28
;   25       FRy "x  < y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPL      T0140
                       PUSH      #0X0000
                       JMP       E0150
T0140                  PUSH      #0XFFFF
E0150                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0170
; **** PRINT statement (  25)
;   26    ELSE
                       PUSHA     SB:0D64
                       SVC       #SVC_WRITE_STRING
;   27       FRy "x >= y",PEEL.
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0160
I0170                  EQU       *
; **** PRINT statement (  27)
;   28    COOKEDPOTATO
                       PUSHA     SB:0D72
                       SVC       #SVC_WRITE_STRING
;   29 
;   30    IF     ( x < y ) 
                       SVC       #SVC_WRITE_ENDL
E0160                  EQU       *
; **** IF statement (  30)
                       PUSH      SB:0D28
;   31       FRy "x  < y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPL      T0180
                       PUSH      #0X0000
                       JMP       E0190
T0180                  PUSH      #0XFFFF
E0190                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0210
; **** PRINT statement (  31)
;   32    ELIF ( x = y ) 
                       PUSHA     SB:0D80
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0200
I0210                  EQU       *
                       PUSH      SB:0D28
;   33       FRy "x  = y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPE      T0220
                       PUSH      #0X0000
                       JMP       E0230
T0220                  PUSH      #0XFFFF
E0230                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0240
; **** PRINT statement (  33)
;   34    ELIF ( x > y ) 
                       PUSHA     SB:0D88
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0200
I0240                  EQU       *
                       PUSH      SB:0D28
;   35       FRy "x  > y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPG      T0250
                       PUSH      #0X0000
                       JMP       E0260
T0250                  PUSH      #0XFFFF
E0260                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0270
; **** PRINT statement (  35)
;   36    COOKEDPOTATO
                       PUSHA     SB:0D96
                       SVC       #SVC_WRITE_STRING
;   37 
;   38    IF     ( x < y ) 
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0200
I0270                  EQU       *
E0200                  EQU       *
; **** IF statement (  38)
                       PUSH      SB:0D28
;   39       FRy "x  < y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPL      T0280
                       PUSH      #0X0000
                       JMP       E0290
T0280                  PUSH      #0XFFFF
E0290                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0310
; **** PRINT statement (  39)
;   40    ELIF ( x = y ) 
                       PUSHA     SB:0D104
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0300
I0310                  EQU       *
                       PUSH      SB:0D28
;   41       FRy "x  = y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPE      T0320
                       PUSH      #0X0000
                       JMP       E0330
T0320                  PUSH      #0XFFFF
E0330                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0340
; **** PRINT statement (  41)
;   42    ELIF ( x > y ) 
                       PUSHA     SB:0D112
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0300
I0340                  EQU       *
                       PUSH      SB:0D28
;   43       FRy "x  > y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPG      T0350
                       PUSH      #0X0000
                       JMP       E0360
T0350                  PUSH      #0XFFFF
E0360                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0370
; **** PRINT statement (  43)
;   44    ELSE
                       PUSHA     SB:0D120
                       SVC       #SVC_WRITE_STRING
;   45       FRy "***ERROR***",PEEL.
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0300
I0370                  EQU       *
; **** PRINT statement (  45)
;   46    COOKEDPOTATO
                       PUSHA     SB:0D128
                       SVC       #SVC_WRITE_STRING
;   47 
;   48    IF     ( x = y ) 
                       SVC       #SVC_WRITE_ENDL
E0300                  EQU       *
; **** IF statement (  48)
                       PUSH      SB:0D28
;   49       FRy "x  = y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPE      T0380
                       PUSH      #0X0000
                       JMP       E0390
T0380                  PUSH      #0XFFFF
E0390                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0410
; **** PRINT statement (  49)
;   50    ELSE
                       PUSHA     SB:0D141
                       SVC       #SVC_WRITE_STRING
;   51       IF ( x > y ) 
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0400
I0410                  EQU       *
; **** IF statement (  51)
                       PUSH      SB:0D28
;   52          FRy "x  > y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPG      T0420
                       PUSH      #0X0000
                       JMP       E0430
T0420                  PUSH      #0XFFFF
E0430                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0450
; **** PRINT statement (  52)
;   53       ELSE
                       PUSHA     SB:0D149
                       SVC       #SVC_WRITE_STRING
;   54          FRy "x  < y",PEEL.
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0440
I0450                  EQU       *
; **** PRINT statement (  54)
;   55       COOKEDPOTATO
                       PUSHA     SB:0D157
                       SVC       #SVC_WRITE_STRING
;   56    COOKEDPOTATO
                       SVC       #SVC_WRITE_ENDL
;   57 COOKEDPOTATO
;   58 
E0440                  EQU       *
E0400                  EQU       *
                       RETURN    
; **** =========
; **** END (  57)
; **** =========

;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D165
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D183
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE

;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       DS        "Normal program termination"
                       RW        0D1                  ; x
                       RW        0D1                  ; y
                       DS        "x? "
                       DS        "y? "
                       DS        "x  < y"
                       DS        "x != y"
                       DS        "x <> y"
                       DS        "x  < y"
                       DS        "x >= y"
                       DS        "x  < y"
                       DS        "x  = y"
                       DS        "x  > y"
                       DS        "x  < y"
                       DS        "x  = y"
                       DS        "x  > y"
                       DS        "***ERROR***"
                       DS        "x  = y"
                       DS        "x  > y"
                       DS        "x  < y"
                       DS        "Run-time error #"
                       DS        " near line #"

;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future POTATO syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words

;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
