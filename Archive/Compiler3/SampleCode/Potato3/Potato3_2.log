Page   1  Potato3_2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0000               1  ;--------------------------------------------------------------
0X0000               2  ; Potato3_2.stm
0X0000               3  ;--------------------------------------------------------------
0X0000               4  ; SVC numbers
0X0000               5  SVC_DONOTHING          EQU       0D0                  ; force context switch
0X0000               6  SVC_TERMINATE          EQU       0D1
0X0000               7  SVC_READ_INTEGER       EQU       0D10
0X0000               8  SVC_WRITE_INTEGER      EQU       0D11
0X0000               9  SVC_READ_FLOAT         EQU       0D20
0X0000              10  SVC_WRITE_FLOAT        EQU       0D21
0X0000              11  SVC_READ_BOOLEAN       EQU       0D30
0X0000              12  SVC_WRITE_BOOLEAN      EQU       0D31
0X0000              13  SVC_READ_CHARACTER     EQU       0D40
0X0000              14  SVC_WRITE_CHARACTER    EQU       0D41
0X0000              15  SVC_WRITE_ENDL         EQU       0D42
0X0000              16  SVC_READ_STRING        EQU       0D50
0X0000              17  SVC_WRITE_STRING       EQU       0D51
0X0000              18  SVC_INITIALIZE_HEAP    EQU       0D90
0X0000              19  SVC_ALLOCATE_BLOCK     EQU       0D91
0X0000              20  SVC_DEALLOCATE_BLOCK   EQU       0D92
0X0000              21  
0X0000              22                         ORG       0X0000
0X0000              23  
0X0000  800003      24                         JMP       PROGRAMMAIN
0X0003              25  ;    1 ||------------------------------------------------------------
0X0003              26  ;    2 || Auroxsus
0X0003              27  ;    3 || Description: demonstrates the use of variables, constants, 
0X0003              28  ;    4 || and basic arithmetic and logical operations with reserved
0X0003              29  ;    5 || word syntax
0X0003              30  ;    6 || Potato3_2.p
0X0003              31  ;    7 ||------------------------------------------------------------
0X0003              32  ;    8 
0X0003              33  ;    9 || global variables
0X0003              34  ;   10 spudling x1; 
0X0003              35  ;   11 spudling x2 : x3;
0X0003              36  ;   12 
0X0003              37  ;   13 || constants
0X0003              38  ;   14 spud spudling c1 = 2;  
0X0003              39  ;   15 spud tater c2 = true;
0X0003              40  ;   16 
0X0003              41  ;   17 crisp mainCrisp () {
0X0003              42  ;   18   || local variables
0X0003              43  ; **** =========
0X0003              44  ; **** PROGRAM module (  17)
0X0003              45  ; **** =========
0X0003              46  PROGRAMMAIN            EQU       *
0X0003  0100FFFE    47                         PUSH      #RUNTIMESTACK        ; set SP
0X0007  0A          48                         POPSP     
0X0008  020101E9    49                         PUSHA     STATICDATA           ; set SB
0X000C  0C          50                         POPSB     
0X000D  01000351    51                         PUSH      #HEAPBASE            ; initialize heap
0X0011  01002000    52                         PUSH      #HEAPSIZE
0X0015  FF005A      53                         SVC       #SVC_INITIALIZE_HEAP
0X0018  A0002C      54                         CALL      PROGRAMBODY0010
0X001B  020A0005    55                         PUSHA     SB:0D5
0X001F  FF0033      56                         SVC       #SVC_WRITE_STRING
Page   2  Potato3_2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0022  FF002A      57                         SVC       #SVC_WRITE_ENDL
0X0025  01000000    58                         PUSH      #0D0                 ; terminate with status = 0
0X0029  FF0001      59                         SVC       #SVC_TERMINATE
0X002C              60  PROGRAMBODY0010        EQU       *
0X002C              61  ;   19    spudling sum : x4;
0X002C              62  ;   20    tater b1 : b2;
0X002C              63  ;   21    spud spudling c3 = 3; 
0X002C              64  ;   22    spud tater c4 = false;
0X002C              65  ;   23    
0X002C              66  ;   24    || print constants
0X002C              67  ;   25    bite "c1 = ", c1, endl;
0X002C              68  ; **** PRINT statement (  25)
0X002C  020A0027    69                         PUSHA     SB:0D39
0X0030  FF0033      70                         SVC       #SVC_WRITE_STRING
0X0033              71  ;   26    bite "c2 = ", c2, endl;
0X0033  010A0003    72                         PUSH      SB:0D3
0X0037  FF000B      73                         SVC       #SVC_WRITE_INTEGER
0X003A  FF002A      74                         SVC       #SVC_WRITE_ENDL
0X003D              75  ; **** PRINT statement (  26)
0X003D  020A002E    76                         PUSHA     SB:0D46
0X0041  FF0033      77                         SVC       #SVC_WRITE_STRING
0X0044              78  ;   27    bite "c3 = ", c3, endl;
0X0044  010A0004    79                         PUSH      SB:0D4
0X0048  FF001F      80                         SVC       #SVC_WRITE_BOOLEAN
0X004B  FF002A      81                         SVC       #SVC_WRITE_ENDL
0X004E              82  ; **** PRINT statement (  27)
0X004E  020A0035    83                         PUSHA     SB:0D53
0X0052  FF0033      84                         SVC       #SVC_WRITE_STRING
0X0055              85  ;   28    bite "c4 = ", c4, endl;
0X0055  010A0025    86                         PUSH      SB:0D37
0X0059  FF000B      87                         SVC       #SVC_WRITE_INTEGER
0X005C  FF002A      88                         SVC       #SVC_WRITE_ENDL
0X005F              89  ; **** PRINT statement (  28)
0X005F  020A003C    90                         PUSHA     SB:0D60
0X0063  FF0033      91                         SVC       #SVC_WRITE_STRING
0X0066              92  ;   29 
0X0066              93  ;   30    
0X0066  010A0026    94                         PUSH      SB:0D38
0X006A  FF001F      95                         SVC       #SVC_WRITE_BOOLEAN
0X006D              96  ;   31    |[ sample static semantic error
0X006D              97  ;   32    c1 plant 2; || assignment attempt to a constant
0X006D              98  ;   33    spudling x1; || unable to name local a global name
0X006D              99  ;   34    uncomment and try! ]|
0X006D             100  ;   35     
0X006D             101  ;   36    x1 plant 0;
0X006D  FF002A     102                         SVC       #SVC_WRITE_ENDL
0X0070             103  ;   37    unearth "x1? " x1; || prompt user for unput
0X0070             104  ; **** assignment statement (  36)
0X0070  020A0000   105                         PUSHA     SB:0D0
0X0074  01000000   106                         PUSH      #0D0
0X0078  06         107                         MAKEDUP   
0X0079  03050002   108                         POP       @SP:0D2
0X007D  05         109                         SWAP      
0X007E  040001     110                         DISCARD   #0D1
0X0081  040001     111                         DISCARD   #0D1
0X0084             112  ; **** INPUT statement (  37)
Page   3  Potato3_2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0084  020A0043   113                         PUSHA     SB:0D67
0X0088  FF0033     114                         SVC       #SVC_WRITE_STRING
0X008B             115  ;   38    unearth x2;
0X008B  020A0000   116                         PUSHA     SB:0D0
0X008F             117  ;   39    sum = x1 mash x2 mash c1;
0X008F  FF000A     118                         SVC       #SVC_READ_INTEGER
0X0092  03050001   119                         POP       @SP:0D1
0X0096  040001     120                         DISCARD   #0D1
0X0099             121  ; **** INPUT statement (  38)
0X0099  020A0001   122                         PUSHA     SB:0D1
0X009D  FF000A     123                         SVC       #SVC_READ_INTEGER
0X00A0  03050001   124                         POP       @SP:0D1
0X00A4  040001     125                         DISCARD   #0D1
0X00A7             126  ; **** assignment statement (  39)
0X00A7  020A0021   127                         PUSHA     SB:0D33
0X00AB  010A0000   128                         PUSH      SB:0D0
0X00AF             129  ;   40    bite "x1 + x2 + c1 = ", sum, endl;
0X00AF  010A0001   130                         PUSH      SB:0D1
0X00B3  20         131                         ADDI      
0X00B4  010A0003   132                         PUSH      SB:0D3
0X00B8  20         133                         ADDI      
0X00B9  06         134                         MAKEDUP   
0X00BA  03050002   135                         POP       @SP:0D2
0X00BE  05         136                         SWAP      
0X00BF  040001     137                         DISCARD   #0D1
0X00C2  040001     138                         DISCARD   #0D1
0X00C5             139  ; **** PRINT statement (  40)
0X00C5  020A0049   140                         PUSHA     SB:0D73
0X00C9  FF0033     141                         SVC       #SVC_WRITE_STRING
0X00CC             142  ;   41    
0X00CC  010A0021   143                         PUSH      SB:0D33
0X00D0  FF000B     144                         SVC       #SVC_WRITE_INTEGER
0X00D3             145  ;   42    || increment and decrement operators   
0X00D3             146  ;   43    bite "x1 = ", x1, ", ++x1 = ", sprout x1, endl;
0X00D3  FF002A     147                         SVC       #SVC_WRITE_ENDL
0X00D6             148  ; **** PRINT statement (  43)
0X00D6  020A005A   149                         PUSHA     SB:0D90
0X00DA  FF0033     150                         SVC       #SVC_WRITE_STRING
0X00DD  010A0000   151                         PUSH      SB:0D0
0X00E1  FF000B     152                         SVC       #SVC_WRITE_INTEGER
0X00E4  020A0061   153                         PUSHA     SB:0D97
0X00E8  FF0033     154                         SVC       #SVC_WRITE_STRING
0X00EB             155  ;   44    bite "x1 = ", x1, ", --x1 = ", root x1, endl;
0X00EB  020A0000   156                         PUSHA     SB:0D0
0X00EF  01050000   157                         PUSH      @SP:0D0
0X00F3  01000001   158                         PUSH      #0D1
0X00F7  20         159                         ADDI      
0X00F8  03050001   160                         POP       @SP:0D1
0X00FC  01050000   161                         PUSH      @SP:0D0
0X0100  05         162                         SWAP      
0X0101  040001     163                         DISCARD   #0D1
0X0104  FF000B     164                         SVC       #SVC_WRITE_INTEGER
0X0107  FF002A     165                         SVC       #SVC_WRITE_ENDL
0X010A             166  ; **** PRINT statement (  44)
0X010A  020A006C   167                         PUSHA     SB:0D108
0X010E  FF0033     168                         SVC       #SVC_WRITE_STRING
Page   4  Potato3_2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0111  010A0000   169                         PUSH      SB:0D0
0X0115  FF000B     170                         SVC       #SVC_WRITE_INTEGER
0X0118  020A0073   171                         PUSHA     SB:0D115
0X011C  FF0033     172                         SVC       #SVC_WRITE_STRING
0X011F             173  ;   45    
0X011F  020A0000   174                         PUSHA     SB:0D0
0X0123  01050000   175                         PUSH      @SP:0D0
0X0127  01000001   176                         PUSH      #0D1
0X012B  22         177                         SUBI      
0X012C  03050001   178                         POP       @SP:0D1
0X0130  01050000   179                         PUSH      @SP:0D0
0X0134  05         180                         SWAP      
0X0135  040001     181                         DISCARD   #0D1
0X0138  FF000B     182                         SVC       #SVC_WRITE_INTEGER
0X013B             183  ;   46    unearth "b1? " b1;
0X013B  FF002A     184                         SVC       #SVC_WRITE_ENDL
0X013E             185  ;   47    b2 = raw b1 mix (c2 eitherSpud c4);
0X013E             186  ; **** INPUT statement (  46)
0X013E  020A007E   187                         PUSHA     SB:0D126
0X0142  FF0033     188                         SVC       #SVC_WRITE_STRING
0X0145  020A0023   189                         PUSHA     SB:0D35
0X0149  FF001E     190                         SVC       #SVC_READ_BOOLEAN
0X014C  03050001   191                         POP       @SP:0D1
0X0150  040001     192                         DISCARD   #0D1
0X0153             193  ; **** assignment statement (  47)
0X0153  020A0024   194                         PUSHA     SB:0D36
0X0157  010A0023   195                         PUSH      SB:0D35
0X015B  33         196                         NOT       
0X015C             197  ;   48    bite "b1 = ", b1, ", b2 = ", b2, endl;
0X015C  010A0004   198                         PUSH      SB:0D4
0X0160  010A0026   199                         PUSH      SB:0D38
0X0164  31         200                         XOR       
0X0165  2F         201                         OR        
0X0166  06         202                         MAKEDUP   
0X0167  03050002   203                         POP       @SP:0D2
0X016B  05         204                         SWAP      
0X016C  040001     205                         DISCARD   #0D1
0X016F  040001     206                         DISCARD   #0D1
0X0172             207  ; **** PRINT statement (  48)
0X0172  020A0084   208                         PUSHA     SB:0D132
0X0176  FF0033     209                         SVC       #SVC_WRITE_STRING
0X0179  010A0023   210                         PUSH      SB:0D35
0X017D  FF001F     211                         SVC       #SVC_WRITE_BOOLEAN
0X0180  020A008B   212                         PUSHA     SB:0D139
0X0184  FF0033     213                         SVC       #SVC_WRITE_STRING
0X0187             214  ;   49 
0X0187             215  ;   50 
0X0187  010A0024   216                         PUSH      SB:0D36
0X018B             217  ;   51 }
0X018B  FF001F     218                         SVC       #SVC_WRITE_BOOLEAN
0X018E  FF002A     219                         SVC       #SVC_WRITE_ENDL
0X0191  A1         220                         RETURN    
0X0192             221  ; **** =========
0X0192             222  ; **** END (  51)
0X0192             223  ; **** =========
0X0192             224  ;--------------------------------------------------------------
Page   5  Potato3_2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0192             225  ; Common subroutines
0X0192             226  ;--------------------------------------------------------------
0X0192             227  CHRIsInRange           EQU       *                    ; CHR,LB,UB,RA
0X0192  01040002   228                         PUSH      SP:0D2               ; CHR,LB,UB,RA,LB
0X0196  01040004   229                         PUSH      SP:0D4               ; CHR,LB,UB,RA,LB,CHR
0X019A  70         230                         CMPI                           ; CHR,LB,UB,RA (set LEG)
0X019B  8301BA     231                         JMPG      F0030                ; CHR,LB,UB,RA
0X019E  01040003   232                         PUSH      SP:0D3               ; CHR,LB,UB,RA,CHR
0X01A2  01040002   233                         PUSH      SP:0D2               ; CHR,LB,UB,RA,CHR,UB
0X01A6  70         234                         CMPI                           ; CHR,LB,UB,RA (set LEG)
0X01A7  8301BA     235                         JMPG      F0030                ; CHR,LB,UB,RA
0X01AA             236  T0020                  EQU       *                    ; CHR,LB,UB,RA
0X01AA  05         237                         SWAP                           ; CHR,LB,RA,UB
0X01AB  040001     238                         DISCARD   #0D1                 ; CHR,LB,RA
0X01AE  05         239                         SWAP                           ; CHR,RA,LB
0X01AF  040001     240                         DISCARD   #0D1                 ; CHR,RA
0X01B2  0100FFFF   241                         PUSH      #0XFFFF              ; CHR,RA,true
0X01B6  05         242                         SWAP                           ; CHR,true,RA
0X01B7  8001C7     243                         JMP       E0040                ; CHR,true,RA
0X01BA             244  F0030                  EQU       *                    ; CHR,LB,UB,RA
0X01BA  05         245                         SWAP                           ; CHR,LB,RA,UB
0X01BB  040001     246                         DISCARD   #0D1                 ; CHR,LB,RA
0X01BE  05         247                         SWAP                           ; CHR,RA,LB
0X01BF  040001     248                         DISCARD   #0D1                 ; CHR,RA
0X01C2  01000000   249                         PUSH      #0X0000              ; CHR,RA,false
0X01C6  05         250                         SWAP                           ; CHR,false,RA
0X01C7             251  E0040                  EQU       *                    ; CHR,true-or-false,RA
0X01C7  A1         252                         RETURN                         ; CHR,true-or-false,RA
0X01C8             253  ;------------------------------------------------------------
0X01C8             254  ; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
0X01C8             255  ;------------------------------------------------------------
0X01C8             256  HANDLERUNTIMEERROR     EQU       *
0X01C8  FF002A     257                         SVC       #SVC_WRITE_ENDL
0X01CB  020A0094   258                         PUSHA     SB:0D148
0X01CF  FF0033     259                         SVC       #SVC_WRITE_STRING
0X01D2  FF000B     260                         SVC       #SVC_WRITE_INTEGER
0X01D5  020A00A6   261                         PUSHA     SB:0D166
0X01D9  FF0033     262                         SVC       #SVC_WRITE_STRING
0X01DC  FF000B     263                         SVC       #SVC_WRITE_INTEGER
0X01DF  FF002A     264                         SVC       #SVC_WRITE_ENDL
0X01E2  01000001   265                         PUSH      #0D1
0X01E6  FF0001     266                         SVC       #SVC_TERMINATE
0X01E9             267  ;------------------------------------------------------------
0X01E9             268  ; Static allocation of global data and PROGRAM module data
0X01E9             269  ;------------------------------------------------------------
0X01E9             270  STATICDATA             EQU       *
0X01E9             271                         RW        0D1                  ; x1
0X01EB             272                         RW        0D1                  ; x2
0X01ED             273                         RW        0D1                  ; x3
0X01EF  0002       274                         DW        0D2                  ; c1
0X01F1  FFFF       275                         DW        true                 ; c2
0X01F3  001A001A   276                         DS        "Normal program termination"
0X01F7  004E006F
0X01FB  0072006D
0X01FF  0061006C
0X0203  00200070
Page   6  Potato3_2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0207  0072006F
0X020B  00670072
0X020F  0061006D
0X0213  00200074
0X0217  00650072
0X021B  006D0069
0X021F  006E0061
0X0223  00740069
0X0227  006F006E
0X022B             277                         RW        0D1                  ; sum
0X022D             278                         RW        0D1                  ; x4
0X022F             279                         RW        0D1                  ; b1
0X0231             280                         RW        0D1                  ; b2
0X0233  0003       281                         DW        0D3                  ; c3
0X0235  0000       282                         DW        false                ; c4
0X0237  00050005   283                         DS        "c1 = "
0X023B  00630031
0X023F  0020003D
0X0243  0020    
0X0245  00050005   284                         DS        "c2 = "
0X0249  00630032
0X024D  0020003D
0X0251  0020    
0X0253  00050005   285                         DS        "c3 = "
0X0257  00630033
0X025B  0020003D
0X025F  0020    
0X0261  00050005   286                         DS        "c4 = "
0X0265  00630034
0X0269  0020003D
0X026D  0020    
0X026F  00040004   287                         DS        "x1? "
0X0273  00780031
0X0277  003F0020
0X027B  000F000F   288                         DS        "x1 + x2 + c1 = "
0X027F  00780031
0X0283  0020002B
0X0287  00200078
0X028B  00320020
0X028F  002B0020
0X0293  00630031
0X0297  0020003D
0X029B  0020    
0X029D  00050005   289                         DS        "x1 = "
0X02A1  00780031
0X02A5  0020003D
0X02A9  0020    
0X02AB  00090009   290                         DS        ", ++x1 = "
0X02AF  002C0020
0X02B3  002B002B
0X02B7  00780031
0X02BB  0020003D
0X02BF  0020    
0X02C1  00050005   291                         DS        "x1 = "
0X02C5  00780031
0X02C9  0020003D
Page   7  Potato3_2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X02CD  0020    
0X02CF  00090009   292                         DS        ", --x1 = "
0X02D3  002C0020
0X02D7  002D002D
0X02DB  00780031
0X02DF  0020003D
0X02E3  0020    
0X02E5  00040004   293                         DS        "b1? "
0X02E9  00620031
0X02ED  003F0020
0X02F1  00050005   294                         DS        "b1 = "
0X02F5  00620031
0X02F9  0020003D
0X02FD  0020    
0X02FF  00070007   295                         DS        ", b2 = "
0X0303  002C0020
0X0307  00620032
0X030B  0020003D
0X030F  0020    
0X0311  00100010   296                         DS        "Run-time error #"
0X0315  00520075
0X0319  006E002D
0X031D  00740069
0X0321  006D0065
0X0325  00200065
0X0329  00720072
0X032D  006F0072
0X0331  00200023
0X0335  000C000C   297                         DS        " near line #"
0X0339  0020006E
0X033D  00650061
0X0341  00720020
0X0345  006C0069
0X0349  006E0065
0X034D  00200023
0X0351             298  ;------------------------------------------------------------
0X0351             299  ; Heap space for dynamic memory allocation (to support future SPL syntax)
0X0351             300  ;------------------------------------------------------------
0X0351             301  HEAPBASE               EQU       *
0X0351             302  HEAPSIZE               EQU       0B0010000000000000   ; 8K bytes = 4K words
0X0351             303  ;------------------------------------------------------------
0X0351             304  ; Run-time stack
0X0351             305  ;------------------------------------------------------------
0X0351             306  RUNTIMESTACK           EQU       0XFFFE


  PC   SP TOS0 TOS1 TOS2 mnemonic  information
---- ---- ---- ---- ---- --------- ----------------------------------------------
0000 FFFE                 JMP       0X0003
0003 FFFE                 PUSH      #memory[EA = 0X0005] = 0XFFFE
0007 FFFC FFFE            POPSP     SP = 0XFFFE
0008 FFFE                 PUSHA     memory[EA = 0X01E9]
000C FFFC 01E9            POPSB     SB = 0X01E9
000D FFFE                 PUSH      #memory[EA = 0X000F] = 0X0351
0011 FFFC 0351            PUSH      #memory[EA = 0X0013] = 0X2000
-------------------------------------------------------------
FREE nodes list
   0X0351:0X2350(0X1FFC)
-------------------------------------------------------------
0015 FFFA 2000 0351       SVC       #90 initialize heap, heapBase = 0X0351, heapSize = 0X2000 words
0018 FFFE                 CALL      0X002C return to 0X001B
002C FFFC 001B            PUSHA     SB( 39) memory[EA = 0X0237]
0030 FFFA 0237 001B       SVC       #51 write string
0033 FFFC 001B            PUSH      SB(  3) memory[EA = 0X01EF] = 0X0002
0037 FFFA 0002 001B       SVC       #11 write integer
c1 = 2
003A FFFC 001B            SVC       #42 write ENDL
003D FFFC 001B            PUSHA     SB( 46) memory[EA = 0X0245]
0041 FFFA 0245 001B       SVC       #51 write string
0044 FFFC 001B            PUSH      SB(  4) memory[EA = 0X01F1] = 0XFFFF
0048 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
c2 = T
004B FFFC 001B            SVC       #42 write ENDL
004E FFFC 001B            PUSHA     SB( 53) memory[EA = 0X0253]
0052 FFFA 0253 001B       SVC       #51 write string
0055 FFFC 001B            PUSH      SB( 37) memory[EA = 0X0233] = 0X0003
0059 FFFA 0003 001B       SVC       #11 write integer
c3 = 3
005C FFFC 001B            SVC       #42 write ENDL
005F FFFC 001B            PUSHA     SB( 60) memory[EA = 0X0261]
0063 FFFA 0261 001B       SVC       #51 write string
0066 FFFC 001B            PUSH      SB( 38) memory[EA = 0X0235] = 0X0000
006A FFFA 0000 001B       SVC       #31 write boolean 0X0000
c4 = F
006D FFFC 001B            SVC       #42 write ENDL
0070 FFFC 001B            PUSHA     SB(  0) memory[EA = 0X01E9]
0074 FFFA 01E9 001B       PUSH      #memory[EA = 0X0076] = 0X0000
0078 FFF8 0000 01E9  001B MAKEDUP   duplicate 0X0000
0079 FFF6 0000 0000  01E9 POP       @SP(  2) memory[EA = 0X01E9 = memory[0XFFFC]] = 0X0000
007D FFF8 0000 01E9  001B SWAP      0X01E9 <--> 0X0000
007E FFF8 01E9 0000  001B DISCARD   #1 words from top-of-stack
0081 FFFA 0000 001B       DISCARD   #1 words from top-of-stack
0084 FFFC 001B            PUSHA     SB( 67) memory[EA = 0X026F]
0088 FFFA 026F 001B       SVC       #51 write string
008B FFFC 001B            PUSHA     SB(  0) memory[EA = 0X01E9]
x1? 4
008F FFFA 01E9 001B       SVC       #10 read integer 0X0004
0092 FFF8 0004 01E9  001B POP       @SP(  1) memory[EA = 0X01E9 = memory[0XFFFC]] = 0X0004
0096 FFFA 01E9 001B       DISCARD   #1 words from top-of-stack
0099 FFFC 001B            PUSHA     SB(  1) memory[EA = 0X01EB]
? 6
009D FFFA 01EB 001B       SVC       #10 read integer 0X0006
00A0 FFF8 0006 01EB  001B POP       @SP(  1) memory[EA = 0X01EB = memory[0XFFFC]] = 0X0006
00A4 FFFA 01EB 001B       DISCARD   #1 words from top-of-stack
00A7 FFFC 001B            PUSHA     SB( 33) memory[EA = 0X022B]
00AB FFFA 022B 001B       PUSH      SB(  0) memory[EA = 0X01E9] = 0X0004
00AF FFF8 0004 022B  001B PUSH      SB(  1) memory[EA = 0X01EB] = 0X0006
00B3 FFF6 0006 0004  022B ADDI      0X000A = 0X0004 + 0X0006
00B4 FFF8 000A 022B  001B PUSH      SB(  3) memory[EA = 0X01EF] = 0X0002
00B8 FFF6 0002 000A  022B ADDI      0X000C = 0X000A + 0X0002
00B9 FFF8 000C 022B  001B MAKEDUP   duplicate 0X000C
00BA FFF6 000C 000C  022B POP       @SP(  2) memory[EA = 0X022B = memory[0XFFFC]] = 0X000C
00BE FFF8 000C 022B  001B SWAP      0X022B <--> 0X000C
00BF FFF8 022B 000C  001B DISCARD   #1 words from top-of-stack
00C2 FFFA 000C 001B       DISCARD   #1 words from top-of-stack
00C5 FFFC 001B            PUSHA     SB( 73) memory[EA = 0X027B]
00C9 FFFA 027B 001B       SVC       #51 write string
00CC FFFC 001B            PUSH      SB( 33) memory[EA = 0X022B] = 0X000C
00D0 FFFA 000C 001B       SVC       #11 write integer
x1 + x2 + c1 = 12
00D3 FFFC 001B            SVC       #42 write ENDL
00D6 FFFC 001B            PUSHA     SB( 90) memory[EA = 0X029D]
00DA FFFA 029D 001B       SVC       #51 write string
00DD FFFC 001B            PUSH      SB(  0) memory[EA = 0X01E9] = 0X0004
00E1 FFFA 0004 001B       SVC       #11 write integer
00E4 FFFC 001B            PUSHA     SB( 97) memory[EA = 0X02AB]
00E8 FFFA 02AB 001B       SVC       #51 write string
00EB FFFC 001B            PUSHA     SB(  0) memory[EA = 0X01E9]
00EF FFFA 01E9 001B       PUSH      @SP(  0) memory[EA = 0X01E9 = memory[0XFFFC]] = 0X0004
00F3 FFF8 0004 01E9  001B PUSH      #memory[EA = 0X00F5] = 0X0001
00F7 FFF6 0001 0004  01E9 ADDI      0X0005 = 0X0004 + 0X0001
00F8 FFF8 0005 01E9  001B POP       @SP(  1) memory[EA = 0X01E9 = memory[0XFFFC]] = 0X0005
00FC FFFA 01E9 001B       PUSH      @SP(  0) memory[EA = 0X01E9 = memory[0XFFFC]] = 0X0005
0100 FFF8 0005 01E9  001B SWAP      0X01E9 <--> 0X0005
0101 FFF8 01E9 0005  001B DISCARD   #1 words from top-of-stack
0104 FFFA 0005 001B       SVC       #11 write integer
x1 = 4, ++x1 = 5
0107 FFFC 001B            SVC       #42 write ENDL
010A FFFC 001B            PUSHA     SB(108) memory[EA = 0X02C1]
010E FFFA 02C1 001B       SVC       #51 write string
0111 FFFC 001B            PUSH      SB(  0) memory[EA = 0X01E9] = 0X0005
0115 FFFA 0005 001B       SVC       #11 write integer
0118 FFFC 001B            PUSHA     SB(115) memory[EA = 0X02CF]
011C FFFA 02CF 001B       SVC       #51 write string
011F FFFC 001B            PUSHA     SB(  0) memory[EA = 0X01E9]
0123 FFFA 01E9 001B       PUSH      @SP(  0) memory[EA = 0X01E9 = memory[0XFFFC]] = 0X0005
0127 FFF8 0005 01E9  001B PUSH      #memory[EA = 0X0129] = 0X0001
012B FFF6 0001 0005  01E9 SUBI      0X0004 = 0X0005 - 0X0001
012C FFF8 0004 01E9  001B POP       @SP(  1) memory[EA = 0X01E9 = memory[0XFFFC]] = 0X0004
0130 FFFA 01E9 001B       PUSH      @SP(  0) memory[EA = 0X01E9 = memory[0XFFFC]] = 0X0004
0134 FFF8 0004 01E9  001B SWAP      0X01E9 <--> 0X0004
0135 FFF8 01E9 0004  001B DISCARD   #1 words from top-of-stack
0138 FFFA 0004 001B       SVC       #11 write integer
x1 = 5, --x1 = 4
013B FFFC 001B            SVC       #42 write ENDL
013E FFFC 001B            PUSHA     SB(126) memory[EA = 0X02E5]
0142 FFFA 02E5 001B       SVC       #51 write string
0145 FFFC 001B            PUSHA     SB( 35) memory[EA = 0X022F]
b1? t
0149 FFFA 022F 001B       SVC       #30 read boolean 0XFFFF
014C FFF8 FFFF 022F  001B POP       @SP(  1) memory[EA = 0X022F = memory[0XFFFC]] = 0XFFFF
0150 FFFA 022F 001B       DISCARD   #1 words from top-of-stack
0153 FFFC 001B            PUSHA     SB( 36) memory[EA = 0X0231]
0157 FFFA 0231 001B       PUSH      SB( 35) memory[EA = 0X022F] = 0XFFFF
015B FFF8 FFFF 0231  001B NOT       F = NOT T
015C FFF8 0000 0231  001B PUSH      SB(  4) memory[EA = 0X01F1] = 0XFFFF
0160 FFF6 FFFF 0000  0231 PUSH      SB( 38) memory[EA = 0X0235] = 0X0000
0164 FFF4 0000 FFFF  0000 XOR       T = T XOR F
0165 FFF6 FFFF 0000  0231 OR        T = F OR T
0166 FFF8 FFFF 0231  001B MAKEDUP   duplicate 0XFFFF
0167 FFF6 FFFF FFFF  0231 POP       @SP(  2) memory[EA = 0X0231 = memory[0XFFFC]] = 0XFFFF
016B FFF8 FFFF 0231  001B SWAP      0X0231 <--> 0XFFFF
016C FFF8 0231 FFFF  001B DISCARD   #1 words from top-of-stack
016F FFFA FFFF 001B       DISCARD   #1 words from top-of-stack
0172 FFFC 001B            PUSHA     SB(132) memory[EA = 0X02F1]
0176 FFFA 02F1 001B       SVC       #51 write string
0179 FFFC 001B            PUSH      SB( 35) memory[EA = 0X022F] = 0XFFFF
017D FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
0180 FFFC 001B            PUSHA     SB(139) memory[EA = 0X02FF]
0184 FFFA 02FF 001B       SVC       #51 write string
0187 FFFC 001B            PUSH      SB( 36) memory[EA = 0X0231] = 0XFFFF
018B FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
b1 = T, b2 = T
018E FFFC 001B            SVC       #42 write ENDL
0191 FFFC 001B            RETURN    to 0X001B
001B FFFE                 PUSHA     SB(  5) memory[EA = 0X01F3]
001F FFFC 01F3            SVC       #51 write string
Normal program termination
0022 FFFE                 SVC       #42 write ENDL
0025 FFFE                 PUSH      #memory[EA = 0X0027] = 0X0000
0029 FFFC 0000            SVC       #1 terminate program with status 0, SP = 0XFFFE

