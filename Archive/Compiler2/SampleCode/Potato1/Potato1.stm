;--------------------------------------------------------------
; Potato1.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 ||------------------------------------------------------------
;    2 || Auroxsus
;    3 || Description: sample print statments
;    4 || Potato1.p
;    5 ||------------------------------------------------------------
;    6 crisp mainCrisp () {
;    7    
; **** =========
; **** PROGRAM module (   6)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0010
                       PUSHA     SB:0D0
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE
PROGRAMBODY0010        EQU       *
;    8    || example 1: Simple string with newline escape sequence
;    9    bite "\"What's up, spud!\"\n";
;   10 
;   11    || example 2: Concatenated string with spaces and punctuation
; **** PRINT statement (   9)
;   12    bite "\"Potatos", " are ", "great!\"", ENDL;
                       PUSHA     SB:0D28
                       SVC       #SVC_WRITE_STRING
; **** PRINT statement (  12)
                       PUSHA     SB:0D52
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D63
                       SVC       #SVC_WRITE_STRING
;   13 
;   14    || example 3: Mixing escape sequences for formatting
                       PUSHA     SB:0D70
                       SVC       #SVC_WRITE_STRING
;   15    bite "\"Menu:\tPotato Fries\n\tPotato Wedges\n\tMashed Potatoes\"", ENDL;
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  15)
;   16 
;   17    || example 4: Using single quotes for a simple message
                       PUSHA     SB:0D80
                       SVC       #SVC_WRITE_STRING
;   18    bite "'Potatoes are life!'", ENDL;
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  18)
;   19 
;   20    || example 5: Currency or symbol within a message
                       PUSHA     SB:0D141
                       SVC       #SVC_WRITE_STRING
;   21    bite "\"Price per lb: $4.99\"", ENDL;
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  21)
;   22 
;   23    || example 6: Sentence split across multiple `bite` statements
                       PUSHA     SB:0D163
                       SVC       #SVC_WRITE_STRING
;   24    bite "\"Let's\"";
                       SVC       #SVC_WRITE_ENDL
;   25    bite " ", "\"grow\"";
; **** PRINT statement (  24)
                       PUSHA     SB:0D188
                       SVC       #SVC_WRITE_STRING
; **** PRINT statement (  25)
;   26    bite " ", "\"potatoes!\"", ENDL;
                       PUSHA     SB:0D199
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D202
                       SVC       #SVC_WRITE_STRING
; **** PRINT statement (  26)
                       PUSHA     SB:0D212
                       SVC       #SVC_WRITE_STRING
;   27 
;   28 }
                       PUSHA     SB:0D215
                       SVC       #SVC_WRITE_STRING
;   29 
;   30 
                       SVC       #SVC_WRITE_ENDL
                       RETURN    
; **** =========
; **** END (  30)
; **** =========
;--------------------------------------------------------------
; Common subroutines
;--------------------------------------------------------------
CHRIsInRange           EQU       *                    ; CHR,LB,UB,RA
                       PUSH      SP:0D2               ; CHR,LB,UB,RA,LB
                       PUSH      SP:0D4               ; CHR,LB,UB,RA,LB,CHR
                       CMPI                           ; CHR,LB,UB,RA (set LEG)
                       JMPG      F0030                ; CHR,LB,UB,RA
                       PUSH      SP:0D3               ; CHR,LB,UB,RA,CHR
                       PUSH      SP:0D2               ; CHR,LB,UB,RA,CHR,UB
                       CMPI                           ; CHR,LB,UB,RA (set LEG)
                       JMPG      F0030                ; CHR,LB,UB,RA
T0020                  EQU       *                    ; CHR,LB,UB,RA
                       SWAP                           ; CHR,LB,RA,UB
                       DISCARD   #0D1                 ; CHR,LB,RA
                       SWAP                           ; CHR,RA,LB
                       DISCARD   #0D1                 ; CHR,RA
                       PUSH      #0XFFFF              ; CHR,RA,true
                       SWAP                           ; CHR,true,RA
                       JMP       E0040                ; CHR,true,RA
F0030                  EQU       *                    ; CHR,LB,UB,RA
                       SWAP                           ; CHR,LB,RA,UB
                       DISCARD   #0D1                 ; CHR,LB,RA
                       SWAP                           ; CHR,RA,LB
                       DISCARD   #0D1                 ; CHR,RA
                       PUSH      #0X0000              ; CHR,RA,false
                       SWAP                           ; CHR,false,RA
E0040                  EQU       *                    ; CHR,true-or-false,RA
                       RETURN                         ; CHR,true-or-false,RA
;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D230
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D248
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE
;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       DS        "Normal program termination"
                       DS        "\"What's up, spud!\"\n"
                       DS        "\"Potatos"
                       DS        " are "
                       DS        "great!\""
                       DS        "\"Menu:\tPotato Fries\n\tPotato Wedges\n\tMashed Potatoes\""
                       DS        "'Potatoes are life!'"
                       DS        "\"Price per lb: $4.99\""
                       DS        "\"Let's\""
                       DS        " "
                       DS        "\"grow\""
                       DS        " "
                       DS        "\"potatoes!\""
                       DS        "Run-time error #"
                       DS        " near line #"
;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future SPL syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0010000000000000   ; 8K bytes = 4K words
;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
