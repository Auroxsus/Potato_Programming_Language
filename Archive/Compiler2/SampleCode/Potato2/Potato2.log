Page   1  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0000               1  ;--------------------------------------------------------------
0X0000               2  ; Potato2.stm
0X0000               3  ;--------------------------------------------------------------
0X0000               4  ; SVC numbers
0X0000               5  SVC_DONOTHING          EQU       0D0                  ; force context switch
0X0000               6  SVC_TERMINATE          EQU       0D1
0X0000               7  SVC_READ_INTEGER       EQU       0D10
0X0000               8  SVC_WRITE_INTEGER      EQU       0D11
0X0000               9  SVC_READ_FLOAT         EQU       0D20
0X0000              10  SVC_WRITE_FLOAT        EQU       0D21
0X0000              11  SVC_READ_BOOLEAN       EQU       0D30
0X0000              12  SVC_WRITE_BOOLEAN      EQU       0D31
0X0000              13  SVC_READ_CHARACTER     EQU       0D40
0X0000              14  SVC_WRITE_CHARACTER    EQU       0D41
0X0000              15  SVC_WRITE_ENDL         EQU       0D42
0X0000              16  SVC_READ_STRING        EQU       0D50
0X0000              17  SVC_WRITE_STRING       EQU       0D51
0X0000              18  SVC_INITIALIZE_HEAP    EQU       0D90
0X0000              19  SVC_ALLOCATE_BLOCK     EQU       0D91
0X0000              20  SVC_DEALLOCATE_BLOCK   EQU       0D92
0X0000              21  
0X0000              22                         ORG       0X0000
0X0000              23  
0X0000  800003      24                         JMP       PROGRAMMAIN
0X0003              25  ;    1 ||------------------------------------------------------------
0X0003              26  ;    2 || Auroxsus
0X0003              27  ;    3 || Description: sample operator statements
0X0003              28  ;    4 || Potato2.p
0X0003              29  ;    5 ||------------------------------------------------------------
0X0003              30  ;    6 
0X0003              31  ;    7 crisp mainCrisp () {
0X0003              32  ;    8 |[----------------------||
0X0003              33  ; **** =========
0X0003              34  ; **** PROGRAM module (   7)
0X0003              35  ; **** =========
0X0003              36  PROGRAMMAIN            EQU       *
0X0003  0100FFFE    37                         PUSH      #RUNTIMESTACK        ; set SP
0X0007  0A          38                         POPSP     
0X0008  0201069C    39                         PUSHA     STATICDATA           ; set SB
0X000C  0C          40                         POPSB     
0X000D  010012BC    41                         PUSH      #HEAPBASE            ; initialize heap
0X0011  01002000    42                         PUSH      #HEAPSIZE
0X0015  FF005A      43                         SVC       #SVC_INITIALIZE_HEAP
0X0018  A0002C      44                         CALL      PROGRAMBODY0010
0X001B  020A0000    45                         PUSHA     SB:0D0
0X001F  FF0033      46                         SVC       #SVC_WRITE_STRING
0X0022  FF002A      47                         SVC       #SVC_WRITE_ENDL
0X0025  01000000    48                         PUSH      #0D0                 ; terminate with status = 0
0X0029  FF0001      49                         SVC       #SVC_TERMINATE
0X002C              50  PROGRAMBODY0010        EQU       *
0X002C              51  ;    9 || Arithmetic Operators ||
0X002C              52  ;   10 ||----------------------]|
0X002C              53  ;   11 
0X002C              54  ;   12    bite "1          = "              , 1                  , endl;
0X002C              55  ; **** PRINT statement (  12)
0X002C  020A001C    56                         PUSHA     SB:0D28
Page   2  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0030  FF0033      57                         SVC       #SVC_WRITE_STRING
0X0033              58  ;   13    bite "+2         = "              , +2                 , endl;
0X0033  01000001    59                         PUSH      #0D1
0X0037  FF000B      60                         SVC       #SVC_WRITE_INTEGER
0X003A  FF002A      61                         SVC       #SVC_WRITE_ENDL
0X003D              62  ; **** PRINT statement (  13)
0X003D  020A002B    63                         PUSHA     SB:0D43
0X0041  FF0033      64                         SVC       #SVC_WRITE_STRING
0X0044              65  ;   14    bite "mash 2     = "              , mash 2             , endl;
0X0044  01000002    66                         PUSH      #0D2
0X0048  FF000B      67                         SVC       #SVC_WRITE_INTEGER
0X004B  FF002A      68                         SVC       #SVC_WRITE_ENDL
0X004E              69  ; **** PRINT statement (  14)
0X004E  020A003A    70                         PUSHA     SB:0D58
0X0052  FF0033      71                         SVC       #SVC_WRITE_STRING
0X0055              72  ;   15    bite "-3         = "              , -3                 , endl;
0X0055  01000002    73                         PUSH      #0D2
0X0059  FF000B      74                         SVC       #SVC_WRITE_INTEGER
0X005C  FF002A      75                         SVC       #SVC_WRITE_ENDL
0X005F              76  ; **** PRINT statement (  15)
0X005F  020A0049    77                         PUSHA     SB:0D73
0X0063  FF0033      78                         SVC       #SVC_WRITE_STRING
0X0066              79  ;   16    bite "peel 3     = "              , peel 3             , endl;
0X0066  01000003    80                         PUSH      #0D3
0X006A  2B          81                         NEGI      
0X006B  FF000B      82                         SVC       #SVC_WRITE_INTEGER
0X006E  FF002A      83                         SVC       #SVC_WRITE_ENDL
0X0071              84  ; **** PRINT statement (  16)
0X0071  020A0058    85                         PUSHA     SB:0D88
0X0075  FF0033      86                         SVC       #SVC_WRITE_STRING
0X0078              87  ;   17    bite "ABS 2      = "              , ABS 2              , endl;
0X0078  01000003    88                         PUSH      #0D3
0X007C  2B          89                         NEGI      
0X007D  FF000B      90                         SVC       #SVC_WRITE_INTEGER
0X0080  FF002A      91                         SVC       #SVC_WRITE_ENDL
0X0083              92  ; **** PRINT statement (  17)
0X0083  020A0067    93                         PUSHA     SB:0D103
0X0087  FF0033      94                         SVC       #SVC_WRITE_STRING
0X008A              95  ;   18    bite "ABS(-2)    = "              , ABS(-3)            , endl;
0X008A  01000002    96                         PUSH      #0D2
0X008E  72          97                         SETNZPI   
0X008F  880093      98                         JMPNN     E0020
0X0092  2B          99                         NEGI      
0X0093             100  E0020                  EQU       *
0X0093  FF000B     101                         SVC       #SVC_WRITE_INTEGER
0X0096  FF002A     102                         SVC       #SVC_WRITE_ENDL
0X0099             103  ; **** PRINT statement (  18)
0X0099  020A0076   104                         PUSHA     SB:0D118
0X009D  FF0033     105                         SVC       #SVC_WRITE_STRING
0X00A0  01000003   106                         PUSH      #0D3
0X00A4             107  ;   19    bite "4 + 5      = "              , 4 + 5              , endl;
0X00A4  2B         108                         NEGI      
0X00A5  72         109                         SETNZPI   
0X00A6  8800AA     110                         JMPNN     E0030
0X00A9  2B         111                         NEGI      
0X00AA             112  E0030                  EQU       *
Page   3  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X00AA  FF000B     113                         SVC       #SVC_WRITE_INTEGER
0X00AD  FF002A     114                         SVC       #SVC_WRITE_ENDL
0X00B0             115  ; **** PRINT statement (  19)
0X00B0  020A0085   116                         PUSHA     SB:0D133
0X00B4  FF0033     117                         SVC       #SVC_WRITE_STRING
0X00B7  01000004   118                         PUSH      #0D4
0X00BB             119  ;   20    bite "4 mash 5   = "              , 4 mash 5           , endl;
0X00BB  01000005   120                         PUSH      #0D5
0X00BF  20         121                         ADDI      
0X00C0  FF000B     122                         SVC       #SVC_WRITE_INTEGER
0X00C3  FF002A     123                         SVC       #SVC_WRITE_ENDL
0X00C6             124  ; **** PRINT statement (  20)
0X00C6  020A0094   125                         PUSHA     SB:0D148
0X00CA  FF0033     126                         SVC       #SVC_WRITE_STRING
0X00CD  01000004   127                         PUSH      #0D4
0X00D1             128  ;   21    bite "8 - 3      = "              , 8 - 3              , endl;
0X00D1  01000005   129                         PUSH      #0D5
0X00D5  20         130                         ADDI      
0X00D6  FF000B     131                         SVC       #SVC_WRITE_INTEGER
0X00D9  FF002A     132                         SVC       #SVC_WRITE_ENDL
0X00DC             133  ; **** PRINT statement (  21)
0X00DC  020A00A3   134                         PUSHA     SB:0D163
0X00E0  FF0033     135                         SVC       #SVC_WRITE_STRING
0X00E3  01000008   136                         PUSH      #0D8
0X00E7             137  ;   22    bite "8 peel 3   = "              , 8 peel 3           , endl;
0X00E7  01000003   138                         PUSH      #0D3
0X00EB  22         139                         SUBI      
0X00EC  FF000B     140                         SVC       #SVC_WRITE_INTEGER
0X00EF  FF002A     141                         SVC       #SVC_WRITE_ENDL
0X00F2             142  ; **** PRINT statement (  22)
0X00F2  020A00B2   143                         PUSHA     SB:0D178
0X00F6  FF0033     144                         SVC       #SVC_WRITE_STRING
0X00F9  01000008   145                         PUSH      #0D8
0X00FD             146  ;   23    bite "6 * 2      = "              , 6 * 7              , endl;
0X00FD  01000003   147                         PUSH      #0D3
0X0101  22         148                         SUBI      
0X0102  FF000B     149                         SVC       #SVC_WRITE_INTEGER
0X0105  FF002A     150                         SVC       #SVC_WRITE_ENDL
0X0108             151  ; **** PRINT statement (  23)
0X0108  020A00C1   152                         PUSHA     SB:0D193
0X010C  FF0033     153                         SVC       #SVC_WRITE_STRING
0X010F  01000006   154                         PUSH      #0D6
0X0113             155  ;   24    bite "6 fry 2    = "              , 6 fry 7            , endl;
0X0113  01000007   156                         PUSH      #0D7
0X0117  24         157                         MULI      
0X0118  FF000B     158                         SVC       #SVC_WRITE_INTEGER
0X011B  FF002A     159                         SVC       #SVC_WRITE_ENDL
0X011E             160  ; **** PRINT statement (  24)
0X011E  020A00D0   161                         PUSHA     SB:0D208
0X0122  FF0033     162                         SVC       #SVC_WRITE_STRING
0X0125  01000006   163                         PUSH      #0D6
0X0129             164  ;   25    bite "10 / 2     = "              , 10 / 2             , endl;
0X0129  01000007   165                         PUSH      #0D7
0X012D  24         166                         MULI      
0X012E  FF000B     167                         SVC       #SVC_WRITE_INTEGER
0X0131  FF002A     168                         SVC       #SVC_WRITE_ENDL
Page   4  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0134             169  ; **** PRINT statement (  25)
0X0134  020A00DF   170                         PUSHA     SB:0D223
0X0138  FF0033     171                         SVC       #SVC_WRITE_STRING
0X013B  0100000A   172                         PUSH      #0D10
0X013F             173  ;   26    bite "10 slice 2 = "              , 10 slice 2         , endl;
0X013F  01000002   174                         PUSH      #0D2
0X0143  26         175                         DIVI      
0X0144  FF000B     176                         SVC       #SVC_WRITE_INTEGER
0X0147  FF002A     177                         SVC       #SVC_WRITE_ENDL
0X014A             178  ; **** PRINT statement (  26)
0X014A  020A00EE   179                         PUSHA     SB:0D238
0X014E  FF0033     180                         SVC       #SVC_WRITE_STRING
0X0151  0100000A   181                         PUSH      #0D10
0X0155             182  ;   27    bite "7 % 3      = "              , 7 % 3              , endl;
0X0155  01000002   183                         PUSH      #0D2
0X0159  26         184                         DIVI      
0X015A  FF000B     185                         SVC       #SVC_WRITE_INTEGER
0X015D  FF002A     186                         SVC       #SVC_WRITE_ENDL
0X0160             187  ; **** PRINT statement (  27)
0X0160  020A00FD   188                         PUSHA     SB:0D253
0X0164  FF0033     189                         SVC       #SVC_WRITE_STRING
0X0167  01000007   190                         PUSH      #0D7
0X016B             191  ;   28    bite "7 mod 3    = "              , 7 mod 3            , endl;
0X016B  01000003   192                         PUSH      #0D3
0X016F  28         193                         REMI      
0X0170  FF000B     194                         SVC       #SVC_WRITE_INTEGER
0X0173  FF002A     195                         SVC       #SVC_WRITE_ENDL
0X0176             196  ; **** PRINT statement (  28)
0X0176  020A010C   197                         PUSHA     SB:0D268
0X017A  FF0033     198                         SVC       #SVC_WRITE_STRING
0X017D  01000007   199                         PUSH      #0D7
0X0181             200  ;   29    bite "2 ^ 3      = "              , 2 ^ 3              , endl;
0X0181  01000003   201                         PUSH      #0D3
0X0185  28         202                         REMI      
0X0186  FF000B     203                         SVC       #SVC_WRITE_INTEGER
0X0189  FF002A     204                         SVC       #SVC_WRITE_ENDL
0X018C             205  ; **** PRINT statement (  29)
0X018C  020A011B   206                         PUSHA     SB:0D283
0X0190  FF0033     207                         SVC       #SVC_WRITE_STRING
0X0193  01000002   208                         PUSH      #0D2
0X0197             209  ;   30    bite "2 pow 3    = "              , 2 pow 3            , endl;
0X0197  01000003   210                         PUSH      #0D3
0X019B  29         211                         POWI      
0X019C  FF000B     212                         SVC       #SVC_WRITE_INTEGER
0X019F  FF002A     213                         SVC       #SVC_WRITE_ENDL
0X01A2             214  ; **** PRINT statement (  30)
0X01A2  020A012A   215                         PUSHA     SB:0D298
0X01A6  FF0033     216                         SVC       #SVC_WRITE_STRING
0X01A9  01000002   217                         PUSH      #0D2
0X01AD             218  ;   31 
0X01AD             219  ;   32 |[----------------------||
0X01AD  01000003   220                         PUSH      #0D3
0X01B1  29         221                         POWI      
0X01B2  FF000B     222                         SVC       #SVC_WRITE_INTEGER
0X01B5             223  ;   33 || Comparison Operators ||
0X01B5             224  ;   34 ||----------------------]|
Page   5  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X01B5             225  ;   35 
0X01B5             226  ;   36    bite "4 == 6                = "  , 4 == 6             , endl;
0X01B5  FF002A     227                         SVC       #SVC_WRITE_ENDL
0X01B8             228  ; **** PRINT statement (  36)
0X01B8  020A0139   229                         PUSHA     SB:0D313
0X01BC  FF0033     230                         SVC       #SVC_WRITE_STRING
0X01BF  01000004   231                         PUSH      #0D4
0X01C3             232  ;   37    bite "4 spudMatch 6         = "  , 4 spudMatch 6      , endl;
0X01C3  01000006   233                         PUSH      #0D6
0X01C7  70         234                         CMPI      
0X01C8  8201D2     235                         JMPE      T0040
0X01CB  01000000   236                         PUSH      #0X0000
0X01CF  8001D6     237                         JMP       E0050
0X01D2  0100FFFF   238  T0040                  PUSH      #0XFFFF
0X01D6             239  E0050                  EQU       *
0X01D6  FF001F     240                         SVC       #SVC_WRITE_BOOLEAN
0X01D9  FF002A     241                         SVC       #SVC_WRITE_ENDL
0X01DC             242  ; **** PRINT statement (  37)
0X01DC  020A0153   243                         PUSHA     SB:0D339
0X01E0  FF0033     244                         SVC       #SVC_WRITE_STRING
0X01E3  01000004   245                         PUSH      #0D4
0X01E7             246  ;   38    bite "4 != 6                = "  , 4 != 6             , endl;
0X01E7  01000006   247                         PUSH      #0D6
0X01EB  70         248                         CMPI      
0X01EC  8201F6     249                         JMPE      T0060
0X01EF  01000000   250                         PUSH      #0X0000
0X01F3  8001FA     251                         JMP       E0070
0X01F6  0100FFFF   252  T0060                  PUSH      #0XFFFF
0X01FA             253  E0070                  EQU       *
0X01FA  FF001F     254                         SVC       #SVC_WRITE_BOOLEAN
0X01FD  FF002A     255                         SVC       #SVC_WRITE_ENDL
0X0200             256  ; **** PRINT statement (  38)
0X0200  020A016D   257                         PUSHA     SB:0D365
0X0204  FF0033     258                         SVC       #SVC_WRITE_STRING
0X0207  01000004   259                         PUSH      #0D4
0X020B             260  ;   39    bite "4 mashApart 6         = "  , 4 mashApart 6      , endl;
0X020B  01000006   261                         PUSH      #0D6
0X020F  70         262                         CMPI      
0X0210  85021A     263                         JMPNE     T0080
0X0213  01000000   264                         PUSH      #0X0000
0X0217  80021E     265                         JMP       E0090
0X021A  0100FFFF   266  T0080                  PUSH      #0XFFFF
0X021E             267  E0090                  EQU       *
0X021E  FF001F     268                         SVC       #SVC_WRITE_BOOLEAN
0X0221  FF002A     269                         SVC       #SVC_WRITE_ENDL
0X0224             270  ; **** PRINT statement (  39)
0X0224  020A0187   271                         PUSHA     SB:0D391
0X0228  FF0033     272                         SVC       #SVC_WRITE_STRING
0X022B  01000004   273                         PUSH      #0D4
0X022F             274  ;   40    bite "4 < 6                 = "  , 4 < 6              , endl;
0X022F  01000006   275                         PUSH      #0D6
0X0233  70         276                         CMPI      
0X0234  85023E     277                         JMPNE     T0100
0X0237  01000000   278                         PUSH      #0X0000
0X023B  800242     279                         JMP       E0110
0X023E  0100FFFF   280  T0100                  PUSH      #0XFFFF
Page   6  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0242             281  E0110                  EQU       *
0X0242  FF001F     282                         SVC       #SVC_WRITE_BOOLEAN
0X0245  FF002A     283                         SVC       #SVC_WRITE_ENDL
0X0248             284  ; **** PRINT statement (  40)
0X0248  020A01A1   285                         PUSHA     SB:0D417
0X024C  FF0033     286                         SVC       #SVC_WRITE_STRING
0X024F  01000004   287                         PUSH      #0D4
0X0253             288  ;   41    bite "4 smallerSpud 6       = "  , 4 smallerSpud 6    , endl;
0X0253  01000006   289                         PUSH      #0D6
0X0257  70         290                         CMPI      
0X0258  810262     291                         JMPL      T0120
0X025B  01000000   292                         PUSH      #0X0000
0X025F  800266     293                         JMP       E0130
0X0262  0100FFFF   294  T0120                  PUSH      #0XFFFF
0X0266             295  E0130                  EQU       *
0X0266  FF001F     296                         SVC       #SVC_WRITE_BOOLEAN
0X0269  FF002A     297                         SVC       #SVC_WRITE_ENDL
0X026C             298  ; **** PRINT statement (  41)
0X026C  020A01BB   299                         PUSHA     SB:0D443
0X0270  FF0033     300                         SVC       #SVC_WRITE_STRING
0X0273  01000004   301                         PUSH      #0D4
0X0277             302  ;   42    bite "4 > 6                 = "  , 4 > 6              , endl;
0X0277  01000006   303                         PUSH      #0D6
0X027B  70         304                         CMPI      
0X027C  810286     305                         JMPL      T0140
0X027F  01000000   306                         PUSH      #0X0000
0X0283  80028A     307                         JMP       E0150
0X0286  0100FFFF   308  T0140                  PUSH      #0XFFFF
0X028A             309  E0150                  EQU       *
0X028A  FF001F     310                         SVC       #SVC_WRITE_BOOLEAN
0X028D  FF002A     311                         SVC       #SVC_WRITE_ENDL
0X0290             312  ; **** PRINT statement (  42)
0X0290  020A01D5   313                         PUSHA     SB:0D469
0X0294  FF0033     314                         SVC       #SVC_WRITE_STRING
0X0297  01000004   315                         PUSH      #0D4
0X029B             316  ;   43    bite "4 biggerSpud 6        = "  , 4 biggerSpud 6     , endl;
0X029B  01000006   317                         PUSH      #0D6
0X029F  70         318                         CMPI      
0X02A0  8302AA     319                         JMPG      T0160
0X02A3  01000000   320                         PUSH      #0X0000
0X02A7  8002AE     321                         JMP       E0170
0X02AA  0100FFFF   322  T0160                  PUSH      #0XFFFF
0X02AE             323  E0170                  EQU       *
0X02AE  FF001F     324                         SVC       #SVC_WRITE_BOOLEAN
0X02B1  FF002A     325                         SVC       #SVC_WRITE_ENDL
0X02B4             326  ; **** PRINT statement (  43)
0X02B4  020A01EF   327                         PUSHA     SB:0D495
0X02B8  FF0033     328                         SVC       #SVC_WRITE_STRING
0X02BB  01000004   329                         PUSH      #0D4
0X02BF             330  ;   44    bite "4 <= 6                = "  , 4 <= 6             , endl;
0X02BF  01000006   331                         PUSH      #0D6
0X02C3  70         332                         CMPI      
0X02C4  8302CE     333                         JMPG      T0180
0X02C7  01000000   334                         PUSH      #0X0000
0X02CB  8002D2     335                         JMP       E0190
0X02CE  0100FFFF   336  T0180                  PUSH      #0XFFFF
Page   7  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X02D2             337  E0190                  EQU       *
0X02D2  FF001F     338                         SVC       #SVC_WRITE_BOOLEAN
0X02D5  FF002A     339                         SVC       #SVC_WRITE_ENDL
0X02D8             340  ; **** PRINT statement (  44)
0X02D8  020A0209   341                         PUSHA     SB:0D521
0X02DC  FF0033     342                         SVC       #SVC_WRITE_STRING
0X02DF  01000004   343                         PUSH      #0D4
0X02E3             344  ;   45    bite "4 notBiggerSpud 6     = "  , 4 notBiggerSpud 6  , endl;
0X02E3  01000006   345                         PUSH      #0D6
0X02E7  70         346                         CMPI      
0X02E8  8402F2     347                         JMPLE     T0200
0X02EB  01000000   348                         PUSH      #0X0000
0X02EF  8002F6     349                         JMP       E0210
0X02F2  0100FFFF   350  T0200                  PUSH      #0XFFFF
0X02F6             351  E0210                  EQU       *
0X02F6  FF001F     352                         SVC       #SVC_WRITE_BOOLEAN
0X02F9  FF002A     353                         SVC       #SVC_WRITE_ENDL
0X02FC             354  ; **** PRINT statement (  45)
0X02FC  020A0223   355                         PUSHA     SB:0D547
0X0300  FF0033     356                         SVC       #SVC_WRITE_STRING
0X0303  01000004   357                         PUSH      #0D4
0X0307             358  ;   46    bite "4 >= 6                = "  , 4 >= 6             , endl;
0X0307  01000006   359                         PUSH      #0D6
0X030B  70         360                         CMPI      
0X030C  840316     361                         JMPLE     T0220
0X030F  01000000   362                         PUSH      #0X0000
0X0313  80031A     363                         JMP       E0230
0X0316  0100FFFF   364  T0220                  PUSH      #0XFFFF
0X031A             365  E0230                  EQU       *
0X031A  FF001F     366                         SVC       #SVC_WRITE_BOOLEAN
0X031D  FF002A     367                         SVC       #SVC_WRITE_ENDL
0X0320             368  ; **** PRINT statement (  46)
0X0320  020A023D   369                         PUSHA     SB:0D573
0X0324  FF0033     370                         SVC       #SVC_WRITE_STRING
0X0327  01000004   371                         PUSH      #0D4
0X032B             372  ;   47    bite "4 notSmallerSpud 6    = "  , 4 notSmallerSpud 6 , endl;
0X032B  01000006   373                         PUSH      #0D6
0X032F  70         374                         CMPI      
0X0330  86033A     375                         JMPGE     T0240
0X0333  01000000   376                         PUSH      #0X0000
0X0337  80033E     377                         JMP       E0250
0X033A  0100FFFF   378  T0240                  PUSH      #0XFFFF
0X033E             379  E0250                  EQU       *
0X033E  FF001F     380                         SVC       #SVC_WRITE_BOOLEAN
0X0341  FF002A     381                         SVC       #SVC_WRITE_ENDL
0X0344             382  ; **** PRINT statement (  47)
0X0344  020A0257   383                         PUSHA     SB:0D599
0X0348  FF0033     384                         SVC       #SVC_WRITE_STRING
0X034B  01000004   385                         PUSH      #0D4
0X034F             386  ;   48 
0X034F             387  ;   49 |[----------------------||
0X034F  01000006   388                         PUSH      #0D6
0X0353  70         389                         CMPI      
0X0354  86035E     390                         JMPGE     T0260
0X0357  01000000   391                         PUSH      #0X0000
0X035B  800362     392                         JMP       E0270
Page   8  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X035E  0100FFFF   393  T0260                  PUSH      #0XFFFF
0X0362             394  E0270                  EQU       *
0X0362  FF001F     395                         SVC       #SVC_WRITE_BOOLEAN
0X0365             396  ;   50 || Logical Operators    ||
0X0365             397  ;   51 ||----------------------]|
0X0365             398  ;   52 
0X0365             399  ;   53    bite "true && true          = "  , true && true       , endl;
0X0365  FF002A     400                         SVC       #SVC_WRITE_ENDL
0X0368             401  ; **** PRINT statement (  53)
0X0368  020A0271   402                         PUSHA     SB:0D625
0X036C  FF0033     403                         SVC       #SVC_WRITE_STRING
0X036F  0100FFFF   404                         PUSH      #0XFFFF
0X0373             405  ;   54    bite "true prep true        = "  , true prep true     , endl;
0X0373  0100FFFF   406                         PUSH      #0XFFFF
0X0377  2D         407                         AND       
0X0378  FF001F     408                         SVC       #SVC_WRITE_BOOLEAN
0X037B  FF002A     409                         SVC       #SVC_WRITE_ENDL
0X037E             410  ; **** PRINT statement (  54)
0X037E  020A028B   411                         PUSHA     SB:0D651
0X0382  FF0033     412                         SVC       #SVC_WRITE_STRING
0X0385  0100FFFF   413                         PUSH      #0XFFFF
0X0389             414  ;   55    bite "true && false         = "  , true && false      , endl;
0X0389  0100FFFF   415                         PUSH      #0XFFFF
0X038D  2D         416                         AND       
0X038E  FF001F     417                         SVC       #SVC_WRITE_BOOLEAN
0X0391  FF002A     418                         SVC       #SVC_WRITE_ENDL
0X0394             419  ; **** PRINT statement (  55)
0X0394  020A02A5   420                         PUSHA     SB:0D677
0X0398  FF0033     421                         SVC       #SVC_WRITE_STRING
0X039B  0100FFFF   422                         PUSH      #0XFFFF
0X039F             423  ;   56    bite "true prep false       = "  , true prep false    , endl;
0X039F  01000000   424                         PUSH      #0X0000
0X03A3  2D         425                         AND       
0X03A4  FF001F     426                         SVC       #SVC_WRITE_BOOLEAN
0X03A7  FF002A     427                         SVC       #SVC_WRITE_ENDL
0X03AA             428  ; **** PRINT statement (  56)
0X03AA  020A02BF   429                         PUSHA     SB:0D703
0X03AE  FF0033     430                         SVC       #SVC_WRITE_STRING
0X03B1  0100FFFF   431                         PUSH      #0XFFFF
0X03B5             432  ;   57    bite "false && false        = "  , false && false     , endl;
0X03B5  01000000   433                         PUSH      #0X0000
0X03B9  2D         434                         AND       
0X03BA  FF001F     435                         SVC       #SVC_WRITE_BOOLEAN
0X03BD  FF002A     436                         SVC       #SVC_WRITE_ENDL
0X03C0             437  ; **** PRINT statement (  57)
0X03C0  020A02D9   438                         PUSHA     SB:0D729
0X03C4  FF0033     439                         SVC       #SVC_WRITE_STRING
0X03C7  01000000   440                         PUSH      #0X0000
0X03CB             441  ;   58    bite "false prep false      = "  , false prep false   , endl;
0X03CB  01000000   442                         PUSH      #0X0000
0X03CF  2D         443                         AND       
0X03D0  FF001F     444                         SVC       #SVC_WRITE_BOOLEAN
0X03D3  FF002A     445                         SVC       #SVC_WRITE_ENDL
0X03D6             446  ; **** PRINT statement (  58)
0X03D6  020A02F3   447                         PUSHA     SB:0D755
0X03DA  FF0033     448                         SVC       #SVC_WRITE_STRING
Page   9  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X03DD  01000000   449                         PUSH      #0X0000
0X03E1             450  ;   59 
0X03E1             451  ;   60    bite "true \\\\ true          = " , true \\ true       , endl;
0X03E1  01000000   452                         PUSH      #0X0000
0X03E5  2D         453                         AND       
0X03E6  FF001F     454                         SVC       #SVC_WRITE_BOOLEAN
0X03E9  FF002A     455                         SVC       #SVC_WRITE_ENDL
0X03EC             456  ; **** PRINT statement (  60)
0X03EC  020A030D   457                         PUSHA     SB:0D781
0X03F0  FF0033     458                         SVC       #SVC_WRITE_STRING
0X03F3  0100FFFF   459                         PUSH      #0XFFFF
0X03F7             460  ;   61    bite "true mix true         = "   , true mix true      , endl;
0X03F7  0100FFFF   461                         PUSH      #0XFFFF
0X03FB  2F         462                         OR        
0X03FC  FF001F     463                         SVC       #SVC_WRITE_BOOLEAN
0X03FF  FF002A     464                         SVC       #SVC_WRITE_ENDL
0X0402             465  ; **** PRINT statement (  61)
0X0402  020A0329   466                         PUSHA     SB:0D809
0X0406  FF0033     467                         SVC       #SVC_WRITE_STRING
0X0409  0100FFFF   468                         PUSH      #0XFFFF
0X040D             469  ;   62    bite "true \\\\ false         = " , true \\ false      , endl;
0X040D  0100FFFF   470                         PUSH      #0XFFFF
0X0411  2F         471                         OR        
0X0412  FF001F     472                         SVC       #SVC_WRITE_BOOLEAN
0X0415  FF002A     473                         SVC       #SVC_WRITE_ENDL
0X0418             474  ; **** PRINT statement (  62)
0X0418  020A0343   475                         PUSHA     SB:0D835
0X041C  FF0033     476                         SVC       #SVC_WRITE_STRING
0X041F  0100FFFF   477                         PUSH      #0XFFFF
0X0423             478  ;   63    bite "true mix false        = "   , true mix false     , endl;
0X0423  01000000   479                         PUSH      #0X0000
0X0427  2F         480                         OR        
0X0428  FF001F     481                         SVC       #SVC_WRITE_BOOLEAN
0X042B  FF002A     482                         SVC       #SVC_WRITE_ENDL
0X042E             483  ; **** PRINT statement (  63)
0X042E  020A035F   484                         PUSHA     SB:0D863
0X0432  FF0033     485                         SVC       #SVC_WRITE_STRING
0X0435  0100FFFF   486                         PUSH      #0XFFFF
0X0439             487  ;   64    bite "false \\\\ false        = " , false \\ false     , endl;
0X0439  01000000   488                         PUSH      #0X0000
0X043D  2F         489                         OR        
0X043E  FF001F     490                         SVC       #SVC_WRITE_BOOLEAN
0X0441  FF002A     491                         SVC       #SVC_WRITE_ENDL
0X0444             492  ; **** PRINT statement (  64)
0X0444  020A0379   493                         PUSHA     SB:0D889
0X0448  FF0033     494                         SVC       #SVC_WRITE_STRING
0X044B  01000000   495                         PUSH      #0X0000
0X044F             496  ;   65    bite "false mix false       = "   , false mix false    , endl;
0X044F  01000000   497                         PUSH      #0X0000
0X0453  2F         498                         OR        
0X0454  FF001F     499                         SVC       #SVC_WRITE_BOOLEAN
0X0457  FF002A     500                         SVC       #SVC_WRITE_ENDL
0X045A             501  ; **** PRINT statement (  65)
0X045A  020A0395   502                         PUSHA     SB:0D917
0X045E  FF0033     503                         SVC       #SVC_WRITE_STRING
0X0461  01000000   504                         PUSH      #0X0000
Page  10  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0465             505  ;   66 
0X0465             506  ;   67    bite "false spudStop true   = "   , false spudStop true      , endl;
0X0465  01000000   507                         PUSH      #0X0000
0X0469  2F         508                         OR        
0X046A  FF001F     509                         SVC       #SVC_WRITE_BOOLEAN
0X046D  FF002A     510                         SVC       #SVC_WRITE_ENDL
0X0470             511  ; **** PRINT statement (  67)
0X0470  020A03AF   512                         PUSHA     SB:0D943
0X0474  FF0033     513                         SVC       #SVC_WRITE_STRING
0X0477  01000000   514                         PUSH      #0X0000
0X047B             515  ;   68    bite "false ~\\ true         = "  , false ~\ true            , endl;
0X047B  0100FFFF   516                         PUSH      #0XFFFF
0X047F  30         517                         NOR       
0X0480  FF001F     518                         SVC       #SVC_WRITE_BOOLEAN
0X0483  FF002A     519                         SVC       #SVC_WRITE_ENDL
0X0486             520  ; **** PRINT statement (  68)
0X0486  020A03C9   521                         PUSHA     SB:0D969
0X048A  FF0033     522                         SVC       #SVC_WRITE_STRING
0X048D  01000000   523                         PUSH      #0X0000
0X0491             524  ;   69    bite "false spudStop false  = "   , false spudStop false     , endl;
0X0491  0100FFFF   525                         PUSH      #0XFFFF
0X0495  30         526                         NOR       
0X0496  FF001F     527                         SVC       #SVC_WRITE_BOOLEAN
0X0499  FF002A     528                         SVC       #SVC_WRITE_ENDL
0X049C             529  ; **** PRINT statement (  69)
0X049C  020A03E4   530                         PUSHA     SB:0D996
0X04A0  FF0033     531                         SVC       #SVC_WRITE_STRING
0X04A3  01000000   532                         PUSH      #0X0000
0X04A7             533  ;   70    bite "false ~\\ false        = "  , false ~\ false           , endl;
0X04A7  01000000   534                         PUSH      #0X0000
0X04AB  30         535                         NOR       
0X04AC  FF001F     536                         SVC       #SVC_WRITE_BOOLEAN
0X04AF  FF002A     537                         SVC       #SVC_WRITE_ENDL
0X04B2             538  ; **** PRINT statement (  70)
0X04B2  020A03FE   539                         PUSHA     SB:0D1022
0X04B6  FF0033     540                         SVC       #SVC_WRITE_STRING
0X04B9  01000000   541                         PUSH      #0X0000
0X04BD             542  ;   71 
0X04BD             543  ;   72    bite "true eitherSpud true  = "   , true eitherSpud true     , endl;
0X04BD  01000000   544                         PUSH      #0X0000
0X04C1  30         545                         NOR       
0X04C2  FF001F     546                         SVC       #SVC_WRITE_BOOLEAN
0X04C5  FF002A     547                         SVC       #SVC_WRITE_ENDL
0X04C8             548  ; **** PRINT statement (  72)
0X04C8  020A0419   549                         PUSHA     SB:0D1049
0X04CC  FF0033     550                         SVC       #SVC_WRITE_STRING
0X04CF  0100FFFF   551                         PUSH      #0XFFFF
0X04D3             552  ;   73    bite "true +\\ true          = "  , true +\ true             , endl;
0X04D3  0100FFFF   553                         PUSH      #0XFFFF
0X04D7  31         554                         XOR       
0X04D8  FF001F     555                         SVC       #SVC_WRITE_BOOLEAN
0X04DB  FF002A     556                         SVC       #SVC_WRITE_ENDL
0X04DE             557  ; **** PRINT statement (  73)
0X04DE  020A0433   558                         PUSHA     SB:0D1075
0X04E2  FF0033     559                         SVC       #SVC_WRITE_STRING
0X04E5  0100FFFF   560                         PUSH      #0XFFFF
Page  11  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X04E9             561  ;   74    bite "true eitherSpud false = "   , true eitherSpud false    , endl;
0X04E9  0100FFFF   562                         PUSH      #0XFFFF
0X04ED  31         563                         XOR       
0X04EE  FF001F     564                         SVC       #SVC_WRITE_BOOLEAN
0X04F1  FF002A     565                         SVC       #SVC_WRITE_ENDL
0X04F4             566  ; **** PRINT statement (  74)
0X04F4  020A044E   567                         PUSHA     SB:0D1102
0X04F8  FF0033     568                         SVC       #SVC_WRITE_STRING
0X04FB  0100FFFF   569                         PUSH      #0XFFFF
0X04FF             570  ;   75    bite "true +\\ false         = "  , true +\ false            , endl;
0X04FF  01000000   571                         PUSH      #0X0000
0X0503  31         572                         XOR       
0X0504  FF001F     573                         SVC       #SVC_WRITE_BOOLEAN
0X0507  FF002A     574                         SVC       #SVC_WRITE_ENDL
0X050A             575  ; **** PRINT statement (  75)
0X050A  020A0468   576                         PUSHA     SB:0D1128
0X050E  FF0033     577                         SVC       #SVC_WRITE_STRING
0X0511  0100FFFF   578                         PUSH      #0XFFFF
0X0515             579  ;   76    bite "false eitherSpud false= "   , false eitherSpud false   , endl;
0X0515  01000000   580                         PUSH      #0X0000
0X0519  31         581                         XOR       
0X051A  FF001F     582                         SVC       #SVC_WRITE_BOOLEAN
0X051D  FF002A     583                         SVC       #SVC_WRITE_ENDL
0X0520             584  ; **** PRINT statement (  76)
0X0520  020A0483   585                         PUSHA     SB:0D1155
0X0524  FF0033     586                         SVC       #SVC_WRITE_STRING
0X0527  01000000   587                         PUSH      #0X0000
0X052B             588  ;   77    bite "false +\\ false        = "  , false +\ false           , endl;
0X052B  01000000   589                         PUSH      #0X0000
0X052F  31         590                         XOR       
0X0530  FF001F     591                         SVC       #SVC_WRITE_BOOLEAN
0X0533  FF002A     592                         SVC       #SVC_WRITE_ENDL
0X0536             593  ; **** PRINT statement (  77)
0X0536  020A049D   594                         PUSHA     SB:0D1181
0X053A  FF0033     595                         SVC       #SVC_WRITE_STRING
0X053D  01000000   596                         PUSH      #0X0000
0X0541             597  ;   78 
0X0541             598  ;   79    bite "false mashless true   = "  , false mashless true      , endl;
0X0541  01000000   599                         PUSH      #0X0000
0X0545  31         600                         XOR       
0X0546  FF001F     601                         SVC       #SVC_WRITE_BOOLEAN
0X0549  FF002A     602                         SVC       #SVC_WRITE_ENDL
0X054C             603  ; **** PRINT statement (  79)
0X054C  020A04B8   604                         PUSHA     SB:0D1208
0X0550  FF0033     605                         SVC       #SVC_WRITE_STRING
0X0553  01000000   606                         PUSH      #0X0000
0X0557             607  ;   80    bite "false ~& true         = "  , false ~& true            , endl;
0X0557  0100FFFF   608                         PUSH      #0XFFFF
0X055B  2E         609                         NAND      
0X055C  FF001F     610                         SVC       #SVC_WRITE_BOOLEAN
0X055F  FF002A     611                         SVC       #SVC_WRITE_ENDL
0X0562             612  ; **** PRINT statement (  80)
0X0562  020A04D2   613                         PUSHA     SB:0D1234
0X0566  FF0033     614                         SVC       #SVC_WRITE_STRING
0X0569  01000000   615                         PUSH      #0X0000
0X056D             616  ;   81    bite "false mashless false  = "  , false mashless false     , endl;
Page  12  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X056D  0100FFFF   617                         PUSH      #0XFFFF
0X0571  2E         618                         NAND      
0X0572  FF001F     619                         SVC       #SVC_WRITE_BOOLEAN
0X0575  FF002A     620                         SVC       #SVC_WRITE_ENDL
0X0578             621  ; **** PRINT statement (  81)
0X0578  020A04EC   622                         PUSHA     SB:0D1260
0X057C  FF0033     623                         SVC       #SVC_WRITE_STRING
0X057F  01000000   624                         PUSH      #0X0000
0X0583             625  ;   82    bite "false ~& false        = "  , false ~& false           , endl;
0X0583  01000000   626                         PUSH      #0X0000
0X0587  2E         627                         NAND      
0X0588  FF001F     628                         SVC       #SVC_WRITE_BOOLEAN
0X058B  FF002A     629                         SVC       #SVC_WRITE_ENDL
0X058E             630  ; **** PRINT statement (  82)
0X058E  020A0506   631                         PUSHA     SB:0D1286
0X0592  FF0033     632                         SVC       #SVC_WRITE_STRING
0X0595  01000000   633                         PUSH      #0X0000
0X0599             634  ;   83    bite "true mashless true    = "  , true mashless true       , endl;
0X0599  01000000   635                         PUSH      #0X0000
0X059D  2E         636                         NAND      
0X059E  FF001F     637                         SVC       #SVC_WRITE_BOOLEAN
0X05A1  FF002A     638                         SVC       #SVC_WRITE_ENDL
0X05A4             639  ; **** PRINT statement (  83)
0X05A4  020A0520   640                         PUSHA     SB:0D1312
0X05A8  FF0033     641                         SVC       #SVC_WRITE_STRING
0X05AB  0100FFFF   642                         PUSH      #0XFFFF
0X05AF             643  ;   84    bite "true ~& true          = "  , true ~& true             , endl;
0X05AF  0100FFFF   644                         PUSH      #0XFFFF
0X05B3  2E         645                         NAND      
0X05B4  FF001F     646                         SVC       #SVC_WRITE_BOOLEAN
0X05B7  FF002A     647                         SVC       #SVC_WRITE_ENDL
0X05BA             648  ; **** PRINT statement (  84)
0X05BA  020A053A   649                         PUSHA     SB:0D1338
0X05BE  FF0033     650                         SVC       #SVC_WRITE_STRING
0X05C1  0100FFFF   651                         PUSH      #0XFFFF
0X05C5             652  ;   85    bite "true mashless false   = "  , true mashless false      , endl;
0X05C5  0100FFFF   653                         PUSH      #0XFFFF
0X05C9  2E         654                         NAND      
0X05CA  FF001F     655                         SVC       #SVC_WRITE_BOOLEAN
0X05CD  FF002A     656                         SVC       #SVC_WRITE_ENDL
0X05D0             657  ; **** PRINT statement (  85)
0X05D0  020A0554   658                         PUSHA     SB:0D1364
0X05D4  FF0033     659                         SVC       #SVC_WRITE_STRING
0X05D7  0100FFFF   660                         PUSH      #0XFFFF
0X05DB             661  ;   86    bite "true ~& false         = "  , true ~& false            , endl;
0X05DB  01000000   662                         PUSH      #0X0000
0X05DF  2E         663                         NAND      
0X05E0  FF001F     664                         SVC       #SVC_WRITE_BOOLEAN
0X05E3  FF002A     665                         SVC       #SVC_WRITE_ENDL
0X05E6             666  ; **** PRINT statement (  86)
0X05E6  020A056E   667                         PUSHA     SB:0D1390
0X05EA  FF0033     668                         SVC       #SVC_WRITE_STRING
0X05ED  0100FFFF   669                         PUSH      #0XFFFF
0X05F1             670  ;   87 
0X05F1             671  ;   88    bite "!true                 = "  , !true                    , endl;
0X05F1  01000000   672                         PUSH      #0X0000
Page  13  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X05F5  2E         673                         NAND      
0X05F6  FF001F     674                         SVC       #SVC_WRITE_BOOLEAN
0X05F9  FF002A     675                         SVC       #SVC_WRITE_ENDL
0X05FC             676  ; **** PRINT statement (  88)
0X05FC  020A0588   677                         PUSHA     SB:0D1416
0X0600  FF0033     678                         SVC       #SVC_WRITE_STRING
0X0603             679  ;   89    bite "raw true              = "  , raw true                 , endl;
0X0603  0100FFFF   680                         PUSH      #0XFFFF
0X0607  33         681                         NOT       
0X0608  FF001F     682                         SVC       #SVC_WRITE_BOOLEAN
0X060B  FF002A     683                         SVC       #SVC_WRITE_ENDL
0X060E             684  ; **** PRINT statement (  89)
0X060E  020A05A2   685                         PUSHA     SB:0D1442
0X0612  FF0033     686                         SVC       #SVC_WRITE_STRING
0X0615             687  ;   90    bite "!false                = "  , !false                   , endl;
0X0615  0100FFFF   688                         PUSH      #0XFFFF
0X0619  33         689                         NOT       
0X061A  FF001F     690                         SVC       #SVC_WRITE_BOOLEAN
0X061D  FF002A     691                         SVC       #SVC_WRITE_ENDL
0X0620             692  ; **** PRINT statement (  90)
0X0620  020A05BC   693                         PUSHA     SB:0D1468
0X0624  FF0033     694                         SVC       #SVC_WRITE_STRING
0X0627             695  ;   91    bite "raw false             = "  , raw false                , endl;
0X0627  01000000   696                         PUSH      #0X0000
0X062B  33         697                         NOT       
0X062C  FF001F     698                         SVC       #SVC_WRITE_BOOLEAN
0X062F  FF002A     699                         SVC       #SVC_WRITE_ENDL
0X0632             700  ; **** PRINT statement (  91)
0X0632  020A05D6   701                         PUSHA     SB:0D1494
0X0636  FF0033     702                         SVC       #SVC_WRITE_STRING
0X0639             703  ;   92 
0X0639             704  ;   93 }
0X0639  01000000   705                         PUSH      #0X0000
0X063D  33         706                         NOT       
0X063E  FF001F     707                         SVC       #SVC_WRITE_BOOLEAN
0X0641  FF002A     708                         SVC       #SVC_WRITE_ENDL
0X0644  A1         709                         RETURN    
0X0645             710  ; **** =========
0X0645             711  ; **** END (  93)
0X0645             712  ; **** =========
0X0645             713  ;--------------------------------------------------------------
0X0645             714  ; Common subroutines
0X0645             715  ;--------------------------------------------------------------
0X0645             716  CHRIsInRange           EQU       *                    ; CHR,LB,UB,RA
0X0645  01040002   717                         PUSH      SP:0D2               ; CHR,LB,UB,RA,LB
0X0649  01040004   718                         PUSH      SP:0D4               ; CHR,LB,UB,RA,LB,CHR
0X064D  70         719                         CMPI                           ; CHR,LB,UB,RA (set LEG)
0X064E  83066D     720                         JMPG      F0290                ; CHR,LB,UB,RA
0X0651  01040003   721                         PUSH      SP:0D3               ; CHR,LB,UB,RA,CHR
0X0655  01040002   722                         PUSH      SP:0D2               ; CHR,LB,UB,RA,CHR,UB
0X0659  70         723                         CMPI                           ; CHR,LB,UB,RA (set LEG)
0X065A  83066D     724                         JMPG      F0290                ; CHR,LB,UB,RA
0X065D             725  T0280                  EQU       *                    ; CHR,LB,UB,RA
0X065D  05         726                         SWAP                           ; CHR,LB,RA,UB
0X065E  040001     727                         DISCARD   #0D1                 ; CHR,LB,RA
0X0661  05         728                         SWAP                           ; CHR,RA,LB
Page  14  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0662  040001     729                         DISCARD   #0D1                 ; CHR,RA
0X0665  0100FFFF   730                         PUSH      #0XFFFF              ; CHR,RA,true
0X0669  05         731                         SWAP                           ; CHR,true,RA
0X066A  80067A     732                         JMP       E0300                ; CHR,true,RA
0X066D             733  F0290                  EQU       *                    ; CHR,LB,UB,RA
0X066D  05         734                         SWAP                           ; CHR,LB,RA,UB
0X066E  040001     735                         DISCARD   #0D1                 ; CHR,LB,RA
0X0671  05         736                         SWAP                           ; CHR,RA,LB
0X0672  040001     737                         DISCARD   #0D1                 ; CHR,RA
0X0675  01000000   738                         PUSH      #0X0000              ; CHR,RA,false
0X0679  05         739                         SWAP                           ; CHR,false,RA
0X067A             740  E0300                  EQU       *                    ; CHR,true-or-false,RA
0X067A  A1         741                         RETURN                         ; CHR,true-or-false,RA
0X067B             742  ;------------------------------------------------------------
0X067B             743  ; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
0X067B             744  ;------------------------------------------------------------
0X067B             745  HANDLERUNTIMEERROR     EQU       *
0X067B  FF002A     746                         SVC       #SVC_WRITE_ENDL
0X067E  020A05F0   747                         PUSHA     SB:0D1520
0X0682  FF0033     748                         SVC       #SVC_WRITE_STRING
0X0685  FF000B     749                         SVC       #SVC_WRITE_INTEGER
0X0688  020A0602   750                         PUSHA     SB:0D1538
0X068C  FF0033     751                         SVC       #SVC_WRITE_STRING
0X068F  FF000B     752                         SVC       #SVC_WRITE_INTEGER
0X0692  FF002A     753                         SVC       #SVC_WRITE_ENDL
0X0695  01000001   754                         PUSH      #0D1
0X0699  FF0001     755                         SVC       #SVC_TERMINATE
0X069C             756  ;------------------------------------------------------------
0X069C             757  ; Static allocation of global data and PROGRAM module data
0X069C             758  ;------------------------------------------------------------
0X069C             759  STATICDATA             EQU       *
0X069C  001A001A   760                         DS        "Normal program termination"
0X06A0  004E006F
0X06A4  0072006D
0X06A8  0061006C
0X06AC  00200070
0X06B0  0072006F
0X06B4  00670072
0X06B8  0061006D
0X06BC  00200074
0X06C0  00650072
0X06C4  006D0069
0X06C8  006E0061
0X06CC  00740069
0X06D0  006F006E
0X06D4  000D000D   761                         DS        "1          = "
0X06D8  00310020
0X06DC  00200020
0X06E0  00200020
0X06E4  00200020
0X06E8  00200020
0X06EC  0020003D
0X06F0  0020    
0X06F2  000D000D   762                         DS        "+2         = "
0X06F6  002B0032
0X06FA  00200020
Page  15  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X06FE  00200020
0X0702  00200020
0X0706  00200020
0X070A  0020003D
0X070E  0020    
0X0710  000D000D   763                         DS        "mash 2     = "
0X0714  006D0061
0X0718  00730068
0X071C  00200032
0X0720  00200020
0X0724  00200020
0X0728  0020003D
0X072C  0020    
0X072E  000D000D   764                         DS        "-3         = "
0X0732  002D0033
0X0736  00200020
0X073A  00200020
0X073E  00200020
0X0742  00200020
0X0746  0020003D
0X074A  0020    
0X074C  000D000D   765                         DS        "peel 3     = "
0X0750  00700065
0X0754  0065006C
0X0758  00200033
0X075C  00200020
0X0760  00200020
0X0764  0020003D
0X0768  0020    
0X076A  000D000D   766                         DS        "ABS 2      = "
0X076E  00410042
0X0772  00530020
0X0776  00320020
0X077A  00200020
0X077E  00200020
0X0782  0020003D
0X0786  0020    
0X0788  000D000D   767                         DS        "ABS(-2)    = "
0X078C  00410042
0X0790  00530028
0X0794  002D0032
0X0798  00290020
0X079C  00200020
0X07A0  0020003D
0X07A4  0020    
0X07A6  000D000D   768                         DS        "4 + 5      = "
0X07AA  00340020
0X07AE  002B0020
0X07B2  00350020
0X07B6  00200020
0X07BA  00200020
0X07BE  0020003D
0X07C2  0020    
0X07C4  000D000D   769                         DS        "4 mash 5   = "
0X07C8  00340020
0X07CC  006D0061
Page  16  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X07D0  00730068
0X07D4  00200035
0X07D8  00200020
0X07DC  0020003D
0X07E0  0020    
0X07E2  000D000D   770                         DS        "8 - 3      = "
0X07E6  00380020
0X07EA  002D0020
0X07EE  00330020
0X07F2  00200020
0X07F6  00200020
0X07FA  0020003D
0X07FE  0020    
0X0800  000D000D   771                         DS        "8 peel 3   = "
0X0804  00380020
0X0808  00700065
0X080C  0065006C
0X0810  00200033
0X0814  00200020
0X0818  0020003D
0X081C  0020    
0X081E  000D000D   772                         DS        "6 * 2      = "
0X0822  00360020
0X0826  002A0020
0X082A  00320020
0X082E  00200020
0X0832  00200020
0X0836  0020003D
0X083A  0020    
0X083C  000D000D   773                         DS        "6 fry 2    = "
0X0840  00360020
0X0844  00660072
0X0848  00790020
0X084C  00320020
0X0850  00200020
0X0854  0020003D
0X0858  0020    
0X085A  000D000D   774                         DS        "10 / 2     = "
0X085E  00310030
0X0862  0020002F
0X0866  00200032
0X086A  00200020
0X086E  00200020
0X0872  0020003D
0X0876  0020    
0X0878  000D000D   775                         DS        "10 slice 2 = "
0X087C  00310030
0X0880  00200073
0X0884  006C0069
0X0888  00630065
0X088C  00200032
0X0890  0020003D
0X0894  0020    
0X0896  000D000D   776                         DS        "7 % 3      = "
0X089A  00370020
0X089E  00250020
Page  17  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X08A2  00330020
0X08A6  00200020
0X08AA  00200020
0X08AE  0020003D
0X08B2  0020    
0X08B4  000D000D   777                         DS        "7 mod 3    = "
0X08B8  00370020
0X08BC  006D006F
0X08C0  00640020
0X08C4  00330020
0X08C8  00200020
0X08CC  0020003D
0X08D0  0020    
0X08D2  000D000D   778                         DS        "2 ^ 3      = "
0X08D6  00320020
0X08DA  005E0020
0X08DE  00330020
0X08E2  00200020
0X08E6  00200020
0X08EA  0020003D
0X08EE  0020    
0X08F0  000D000D   779                         DS        "2 pow 3    = "
0X08F4  00320020
0X08F8  0070006F
0X08FC  00770020
0X0900  00330020
0X0904  00200020
0X0908  0020003D
0X090C  0020    
0X090E  00180018   780                         DS        "4 == 6                = "
0X0912  00340020
0X0916  003D003D
0X091A  00200036
0X091E  00200020
0X0922  00200020
0X0926  00200020
0X092A  00200020
0X092E  00200020
0X0932  00200020
0X0936  00200020
0X093A  00200020
0X093E  003D0020
0X0942  00180018   781                         DS        "4 spudMatch 6         = "
0X0946  00340020
0X094A  00730070
0X094E  00750064
0X0952  004D0061
0X0956  00740063
0X095A  00680020
0X095E  00360020
0X0962  00200020
0X0966  00200020
0X096A  00200020
0X096E  00200020
0X0972  003D0020
0X0976  00180018   782                         DS        "4 != 6                = "
Page  18  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X097A  00340020
0X097E  0021003D
0X0982  00200036
0X0986  00200020
0X098A  00200020
0X098E  00200020
0X0992  00200020
0X0996  00200020
0X099A  00200020
0X099E  00200020
0X09A2  00200020
0X09A6  003D0020
0X09AA  00180018   783                         DS        "4 mashApart 6         = "
0X09AE  00340020
0X09B2  006D0061
0X09B6  00730068
0X09BA  00410070
0X09BE  00610072
0X09C2  00740020
0X09C6  00360020
0X09CA  00200020
0X09CE  00200020
0X09D2  00200020
0X09D6  00200020
0X09DA  003D0020
0X09DE  00180018   784                         DS        "4 < 6                 = "
0X09E2  00340020
0X09E6  003C0020
0X09EA  00360020
0X09EE  00200020
0X09F2  00200020
0X09F6  00200020
0X09FA  00200020
0X09FE  00200020
0X0A02  00200020
0X0A06  00200020
0X0A0A  00200020
0X0A0E  003D0020
0X0A12  00180018   785                         DS        "4 smallerSpud 6       = "
0X0A16  00340020
0X0A1A  0073006D
0X0A1E  0061006C
0X0A22  006C0065
0X0A26  00720053
0X0A2A  00700075
0X0A2E  00640020
0X0A32  00360020
0X0A36  00200020
0X0A3A  00200020
0X0A3E  00200020
0X0A42  003D0020
0X0A46  00180018   786                         DS        "4 > 6                 = "
0X0A4A  00340020
0X0A4E  003E0020
0X0A52  00360020
0X0A56  00200020
Page  19  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0A5A  00200020
0X0A5E  00200020
0X0A62  00200020
0X0A66  00200020
0X0A6A  00200020
0X0A6E  00200020
0X0A72  00200020
0X0A76  003D0020
0X0A7A  00180018   787                         DS        "4 biggerSpud 6        = "
0X0A7E  00340020
0X0A82  00620069
0X0A86  00670067
0X0A8A  00650072
0X0A8E  00530070
0X0A92  00750064
0X0A96  00200036
0X0A9A  00200020
0X0A9E  00200020
0X0AA2  00200020
0X0AA6  00200020
0X0AAA  003D0020
0X0AAE  00180018   788                         DS        "4 <= 6                = "
0X0AB2  00340020
0X0AB6  003C003D
0X0ABA  00200036
0X0ABE  00200020
0X0AC2  00200020
0X0AC6  00200020
0X0ACA  00200020
0X0ACE  00200020
0X0AD2  00200020
0X0AD6  00200020
0X0ADA  00200020
0X0ADE  003D0020
0X0AE2  00180018   789                         DS        "4 notBiggerSpud 6     = "
0X0AE6  00340020
0X0AEA  006E006F
0X0AEE  00740042
0X0AF2  00690067
0X0AF6  00670065
0X0AFA  00720053
0X0AFE  00700075
0X0B02  00640020
0X0B06  00360020
0X0B0A  00200020
0X0B0E  00200020
0X0B12  003D0020
0X0B16  00180018   790                         DS        "4 >= 6                = "
0X0B1A  00340020
0X0B1E  003E003D
0X0B22  00200036
0X0B26  00200020
0X0B2A  00200020
0X0B2E  00200020
0X0B32  00200020
0X0B36  00200020
Page  20  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0B3A  00200020
0X0B3E  00200020
0X0B42  00200020
0X0B46  003D0020
0X0B4A  00180018   791                         DS        "4 notSmallerSpud 6    = "
0X0B4E  00340020
0X0B52  006E006F
0X0B56  00740053
0X0B5A  006D0061
0X0B5E  006C006C
0X0B62  00650072
0X0B66  00530070
0X0B6A  00750064
0X0B6E  00200036
0X0B72  00200020
0X0B76  00200020
0X0B7A  003D0020
0X0B7E  00180018   792                         DS        "true && true          = "
0X0B82  00740072
0X0B86  00750065
0X0B8A  00200026
0X0B8E  00260020
0X0B92  00740072
0X0B96  00750065
0X0B9A  00200020
0X0B9E  00200020
0X0BA2  00200020
0X0BA6  00200020
0X0BAA  00200020
0X0BAE  003D0020
0X0BB2  00180018   793                         DS        "true prep true        = "
0X0BB6  00740072
0X0BBA  00750065
0X0BBE  00200070
0X0BC2  00720065
0X0BC6  00700020
0X0BCA  00740072
0X0BCE  00750065
0X0BD2  00200020
0X0BD6  00200020
0X0BDA  00200020
0X0BDE  00200020
0X0BE2  003D0020
0X0BE6  00180018   794                         DS        "true && false         = "
0X0BEA  00740072
0X0BEE  00750065
0X0BF2  00200026
0X0BF6  00260020
0X0BFA  00660061
0X0BFE  006C0073
0X0C02  00650020
0X0C06  00200020
0X0C0A  00200020
0X0C0E  00200020
0X0C12  00200020
0X0C16  003D0020
Page  21  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0C1A  00180018   795                         DS        "true prep false       = "
0X0C1E  00740072
0X0C22  00750065
0X0C26  00200070
0X0C2A  00720065
0X0C2E  00700020
0X0C32  00660061
0X0C36  006C0073
0X0C3A  00650020
0X0C3E  00200020
0X0C42  00200020
0X0C46  00200020
0X0C4A  003D0020
0X0C4E  00180018   796                         DS        "false && false        = "
0X0C52  00660061
0X0C56  006C0073
0X0C5A  00650020
0X0C5E  00260026
0X0C62  00200066
0X0C66  0061006C
0X0C6A  00730065
0X0C6E  00200020
0X0C72  00200020
0X0C76  00200020
0X0C7A  00200020
0X0C7E  003D0020
0X0C82  00180018   797                         DS        "false prep false      = "
0X0C86  00660061
0X0C8A  006C0073
0X0C8E  00650020
0X0C92  00700072
0X0C96  00650070
0X0C9A  00200066
0X0C9E  0061006C
0X0CA2  00730065
0X0CA6  00200020
0X0CAA  00200020
0X0CAE  00200020
0X0CB2  003D0020
0X0CB6  001A001A   798                         DS        "true \\\\ true          = "
0X0CBA  00740072
0X0CBE  00750065
0X0CC2  0020005C
0X0CC6  005C005C
0X0CCA  005C0020
0X0CCE  00740072
0X0CD2  00750065
0X0CD6  00200020
0X0CDA  00200020
0X0CDE  00200020
0X0CE2  00200020
0X0CE6  00200020
0X0CEA  003D0020
0X0CEE  00180018   799                         DS        "true mix true         = "
0X0CF2  00740072
0X0CF6  00750065
Page  22  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0CFA  0020006D
0X0CFE  00690078
0X0D02  00200074
0X0D06  00720075
0X0D0A  00650020
0X0D0E  00200020
0X0D12  00200020
0X0D16  00200020
0X0D1A  00200020
0X0D1E  003D0020
0X0D22  001A001A   800                         DS        "true \\\\ false         = "
0X0D26  00740072
0X0D2A  00750065
0X0D2E  0020005C
0X0D32  005C005C
0X0D36  005C0020
0X0D3A  00660061
0X0D3E  006C0073
0X0D42  00650020
0X0D46  00200020
0X0D4A  00200020
0X0D4E  00200020
0X0D52  00200020
0X0D56  003D0020
0X0D5A  00180018   801                         DS        "true mix false        = "
0X0D5E  00740072
0X0D62  00750065
0X0D66  0020006D
0X0D6A  00690078
0X0D6E  00200066
0X0D72  0061006C
0X0D76  00730065
0X0D7A  00200020
0X0D7E  00200020
0X0D82  00200020
0X0D86  00200020
0X0D8A  003D0020
0X0D8E  001A001A   802                         DS        "false \\\\ false        = "
0X0D92  00660061
0X0D96  006C0073
0X0D9A  00650020
0X0D9E  005C005C
0X0DA2  005C005C
0X0DA6  00200066
0X0DAA  0061006C
0X0DAE  00730065
0X0DB2  00200020
0X0DB6  00200020
0X0DBA  00200020
0X0DBE  00200020
0X0DC2  003D0020
0X0DC6  00180018   803                         DS        "false mix false       = "
0X0DCA  00660061
0X0DCE  006C0073
0X0DD2  00650020
0X0DD6  006D0069
Page  23  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0DDA  00780020
0X0DDE  00660061
0X0DE2  006C0073
0X0DE6  00650020
0X0DEA  00200020
0X0DEE  00200020
0X0DF2  00200020
0X0DF6  003D0020
0X0DFA  00180018   804                         DS        "false spudStop true   = "
0X0DFE  00660061
0X0E02  006C0073
0X0E06  00650020
0X0E0A  00730070
0X0E0E  00750064
0X0E12  00530074
0X0E16  006F0070
0X0E1A  00200074
0X0E1E  00720075
0X0E22  00650020
0X0E26  00200020
0X0E2A  003D0020
0X0E2E  00190019   805                         DS        "false ~\\ true         = "
0X0E32  00660061
0X0E36  006C0073
0X0E3A  00650020
0X0E3E  007E005C
0X0E42  005C0020
0X0E46  00740072
0X0E4A  00750065
0X0E4E  00200020
0X0E52  00200020
0X0E56  00200020
0X0E5A  00200020
0X0E5E  0020003D
0X0E62  0020    
0X0E64  00180018   806                         DS        "false spudStop false  = "
0X0E68  00660061
0X0E6C  006C0073
0X0E70  00650020
0X0E74  00730070
0X0E78  00750064
0X0E7C  00530074
0X0E80  006F0070
0X0E84  00200066
0X0E88  0061006C
0X0E8C  00730065
0X0E90  00200020
0X0E94  003D0020
0X0E98  00190019   807                         DS        "false ~\\ false        = "
0X0E9C  00660061
0X0EA0  006C0073
0X0EA4  00650020
0X0EA8  007E005C
0X0EAC  005C0020
0X0EB0  00660061
0X0EB4  006C0073
Page  24  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0EB8  00650020
0X0EBC  00200020
0X0EC0  00200020
0X0EC4  00200020
0X0EC8  0020003D
0X0ECC  0020    
0X0ECE  00180018   808                         DS        "true eitherSpud true  = "
0X0ED2  00740072
0X0ED6  00750065
0X0EDA  00200065
0X0EDE  00690074
0X0EE2  00680065
0X0EE6  00720053
0X0EEA  00700075
0X0EEE  00640020
0X0EF2  00740072
0X0EF6  00750065
0X0EFA  00200020
0X0EFE  003D0020
0X0F02  00190019   809                         DS        "true +\\ true          = "
0X0F06  00740072
0X0F0A  00750065
0X0F0E  0020002B
0X0F12  005C005C
0X0F16  00200074
0X0F1A  00720075
0X0F1E  00650020
0X0F22  00200020
0X0F26  00200020
0X0F2A  00200020
0X0F2E  00200020
0X0F32  0020003D
0X0F36  0020    
0X0F38  00180018   810                         DS        "true eitherSpud false = "
0X0F3C  00740072
0X0F40  00750065
0X0F44  00200065
0X0F48  00690074
0X0F4C  00680065
0X0F50  00720053
0X0F54  00700075
0X0F58  00640020
0X0F5C  00660061
0X0F60  006C0073
0X0F64  00650020
0X0F68  003D0020
0X0F6C  00190019   811                         DS        "true +\\ false         = "
0X0F70  00740072
0X0F74  00750065
0X0F78  0020002B
0X0F7C  005C005C
0X0F80  00200066
0X0F84  0061006C
0X0F88  00730065
0X0F8C  00200020
0X0F90  00200020
Page  25  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X0F94  00200020
0X0F98  00200020
0X0F9C  0020003D
0X0FA0  0020    
0X0FA2  00180018   812                         DS        "false eitherSpud false= "
0X0FA6  00660061
0X0FAA  006C0073
0X0FAE  00650020
0X0FB2  00650069
0X0FB6  00740068
0X0FBA  00650072
0X0FBE  00530070
0X0FC2  00750064
0X0FC6  00200066
0X0FCA  0061006C
0X0FCE  00730065
0X0FD2  003D0020
0X0FD6  00190019   813                         DS        "false +\\ false        = "
0X0FDA  00660061
0X0FDE  006C0073
0X0FE2  00650020
0X0FE6  002B005C
0X0FEA  005C0020
0X0FEE  00660061
0X0FF2  006C0073
0X0FF6  00650020
0X0FFA  00200020
0X0FFE  00200020
0X1002  00200020
0X1006  0020003D
0X100A  0020    
0X100C  00180018   814                         DS        "false mashless true   = "
0X1010  00660061
0X1014  006C0073
0X1018  00650020
0X101C  006D0061
0X1020  00730068
0X1024  006C0065
0X1028  00730073
0X102C  00200074
0X1030  00720075
0X1034  00650020
0X1038  00200020
0X103C  003D0020
0X1040  00180018   815                         DS        "false ~& true         = "
0X1044  00660061
0X1048  006C0073
0X104C  00650020
0X1050  007E0026
0X1054  00200074
0X1058  00720075
0X105C  00650020
0X1060  00200020
0X1064  00200020
0X1068  00200020
0X106C  00200020
Page  26  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X1070  003D0020
0X1074  00180018   816                         DS        "false mashless false  = "
0X1078  00660061
0X107C  006C0073
0X1080  00650020
0X1084  006D0061
0X1088  00730068
0X108C  006C0065
0X1090  00730073
0X1094  00200066
0X1098  0061006C
0X109C  00730065
0X10A0  00200020
0X10A4  003D0020
0X10A8  00180018   817                         DS        "false ~& false        = "
0X10AC  00660061
0X10B0  006C0073
0X10B4  00650020
0X10B8  007E0026
0X10BC  00200066
0X10C0  0061006C
0X10C4  00730065
0X10C8  00200020
0X10CC  00200020
0X10D0  00200020
0X10D4  00200020
0X10D8  003D0020
0X10DC  00180018   818                         DS        "true mashless true    = "
0X10E0  00740072
0X10E4  00750065
0X10E8  0020006D
0X10EC  00610073
0X10F0  0068006C
0X10F4  00650073
0X10F8  00730020
0X10FC  00740072
0X1100  00750065
0X1104  00200020
0X1108  00200020
0X110C  003D0020
0X1110  00180018   819                         DS        "true ~& true          = "
0X1114  00740072
0X1118  00750065
0X111C  0020007E
0X1120  00260020
0X1124  00740072
0X1128  00750065
0X112C  00200020
0X1130  00200020
0X1134  00200020
0X1138  00200020
0X113C  00200020
0X1140  003D0020
0X1144  00180018   820                         DS        "true mashless false   = "
0X1148  00740072
0X114C  00750065
Page  27  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X1150  0020006D
0X1154  00610073
0X1158  0068006C
0X115C  00650073
0X1160  00730020
0X1164  00660061
0X1168  006C0073
0X116C  00650020
0X1170  00200020
0X1174  003D0020
0X1178  00180018   821                         DS        "true ~& false         = "
0X117C  00740072
0X1180  00750065
0X1184  0020007E
0X1188  00260020
0X118C  00660061
0X1190  006C0073
0X1194  00650020
0X1198  00200020
0X119C  00200020
0X11A0  00200020
0X11A4  00200020
0X11A8  003D0020
0X11AC  00180018   822                         DS        "!true                 = "
0X11B0  00210074
0X11B4  00720075
0X11B8  00650020
0X11BC  00200020
0X11C0  00200020
0X11C4  00200020
0X11C8  00200020
0X11CC  00200020
0X11D0  00200020
0X11D4  00200020
0X11D8  00200020
0X11DC  003D0020
0X11E0  00180018   823                         DS        "raw true              = "
0X11E4  00720061
0X11E8  00770020
0X11EC  00740072
0X11F0  00750065
0X11F4  00200020
0X11F8  00200020
0X11FC  00200020
0X1200  00200020
0X1204  00200020
0X1208  00200020
0X120C  00200020
0X1210  003D0020
0X1214  00180018   824                         DS        "!false                = "
0X1218  00210066
0X121C  0061006C
0X1220  00730065
0X1224  00200020
0X1228  00200020
0X122C  00200020
Page  28  Potato2.stm

    LC  Object    Line  Source Line
------  --------  ----  -------------------------------------------------------------
0X1230  00200020
0X1234  00200020
0X1238  00200020
0X123C  00200020
0X1240  00200020
0X1244  003D0020
0X1248  00180018   825                         DS        "raw false             = "
0X124C  00720061
0X1250  00770020
0X1254  00660061
0X1258  006C0073
0X125C  00650020
0X1260  00200020
0X1264  00200020
0X1268  00200020
0X126C  00200020
0X1270  00200020
0X1274  00200020
0X1278  003D0020
0X127C  00100010   826                         DS        "Run-time error #"
0X1280  00520075
0X1284  006E002D
0X1288  00740069
0X128C  006D0065
0X1290  00200065
0X1294  00720072
0X1298  006F0072
0X129C  00200023
0X12A0  000C000C   827                         DS        " near line #"
0X12A4  0020006E
0X12A8  00650061
0X12AC  00720020
0X12B0  006C0069
0X12B4  006E0065
0X12B8  00200023
0X12BC             828  ;------------------------------------------------------------
0X12BC             829  ; Heap space for dynamic memory allocation (to support future SPL syntax)
0X12BC             830  ;------------------------------------------------------------
0X12BC             831  HEAPBASE               EQU       *
0X12BC             832  HEAPSIZE               EQU       0B0010000000000000   ; 8K bytes = 4K words
0X12BC             833  ;------------------------------------------------------------
0X12BC             834  ; Run-time stack
0X12BC             835  ;------------------------------------------------------------
0X12BC             836  RUNTIMESTACK           EQU       0XFFFE


  PC   SP TOS0 TOS1 TOS2 mnemonic  information
---- ---- ---- ---- ---- --------- ----------------------------------------------
0000 FFFE                 JMP       0X0003
0003 FFFE                 PUSH      #memory[EA = 0X0005] = 0XFFFE
0007 FFFC FFFE            POPSP     SP = 0XFFFE
0008 FFFE                 PUSHA     memory[EA = 0X069C]
000C FFFC 069C            POPSB     SB = 0X069C
000D FFFE                 PUSH      #memory[EA = 0X000F] = 0X12BC
0011 FFFC 12BC            PUSH      #memory[EA = 0X0013] = 0X2000
-------------------------------------------------------------
FREE nodes list
   0X12BC:0X32BB(0X1FFC)
-------------------------------------------------------------
0015 FFFA 2000 12BC       SVC       #90 initialize heap, heapBase = 0X12BC, heapSize = 0X2000 words
0018 FFFE                 CALL      0X002C return to 0X001B
002C FFFC 001B            PUSHA     SB( 28) memory[EA = 0X06D4]
0030 FFFA 06D4 001B       SVC       #51 write string
0033 FFFC 001B            PUSH      #memory[EA = 0X0035] = 0X0001
0037 FFFA 0001 001B       SVC       #11 write integer
1          = 1
003A FFFC 001B            SVC       #42 write ENDL
003D FFFC 001B            PUSHA     SB( 43) memory[EA = 0X06F2]
0041 FFFA 06F2 001B       SVC       #51 write string
0044 FFFC 001B            PUSH      #memory[EA = 0X0046] = 0X0002
0048 FFFA 0002 001B       SVC       #11 write integer
+2         = 2
004B FFFC 001B            SVC       #42 write ENDL
004E FFFC 001B            PUSHA     SB( 58) memory[EA = 0X0710]
0052 FFFA 0710 001B       SVC       #51 write string
0055 FFFC 001B            PUSH      #memory[EA = 0X0057] = 0X0002
0059 FFFA 0002 001B       SVC       #11 write integer
mash 2     = 2
005C FFFC 001B            SVC       #42 write ENDL
005F FFFC 001B            PUSHA     SB( 73) memory[EA = 0X072E]
0063 FFFA 072E 001B       SVC       #51 write string
0066 FFFC 001B            PUSH      #memory[EA = 0X0068] = 0X0003
006A FFFA 0003 001B       NEGI      0XFFFD = -(0X0003)
006B FFFA FFFD 001B       SVC       #11 write integer
-3         = -3
006E FFFC 001B            SVC       #42 write ENDL
0071 FFFC 001B            PUSHA     SB( 88) memory[EA = 0X074C]
0075 FFFA 074C 001B       SVC       #51 write string
0078 FFFC 001B            PUSH      #memory[EA = 0X007A] = 0X0003
007C FFFA 0003 001B       NEGI      0XFFFD = -(0X0003)
007D FFFA FFFD 001B       SVC       #11 write integer
peel 3     = -3
0080 FFFC 001B            SVC       #42 write ENDL
0083 FFFC 001B            PUSHA     SB(103) memory[EA = 0X076A]
0087 FFFA 076A 001B       SVC       #51 write string
008A FFFC 001B            PUSH      #memory[EA = 0X008C] = 0X0002
008E FFFA 0002 001B       SETNZPI   TOS = 0X0002 NZP = 001
008F FFFA 0002 001B       JMPNN     0X0093 NZP = 001
0093 FFFA 0002 001B       SVC       #11 write integer
ABS 2      = 2
0096 FFFC 001B            SVC       #42 write ENDL
0099 FFFC 001B            PUSHA     SB(118) memory[EA = 0X0788]
009D FFFA 0788 001B       SVC       #51 write string
00A0 FFFC 001B            PUSH      #memory[EA = 0X00A2] = 0X0003
00A4 FFFA 0003 001B       NEGI      0XFFFD = -(0X0003)
00A5 FFFA FFFD 001B       SETNZPI   TOS = 0XFFFD NZP = 100
00A6 FFFA FFFD 001B       JMPNN     0X00AA NZP = 100
00A9 FFFA FFFD 001B       NEGI      0X0003 = -(0XFFFD)
00AA FFFA 0003 001B       SVC       #11 write integer
ABS(-2)    = 3
00AD FFFC 001B            SVC       #42 write ENDL
00B0 FFFC 001B            PUSHA     SB(133) memory[EA = 0X07A6]
00B4 FFFA 07A6 001B       SVC       #51 write string
00B7 FFFC 001B            PUSH      #memory[EA = 0X00B9] = 0X0004
00BB FFFA 0004 001B       PUSH      #memory[EA = 0X00BD] = 0X0005
00BF FFF8 0005 0004  001B ADDI      0X0009 = 0X0004 + 0X0005
00C0 FFFA 0009 001B       SVC       #11 write integer
4 + 5      = 9
00C3 FFFC 001B            SVC       #42 write ENDL
00C6 FFFC 001B            PUSHA     SB(148) memory[EA = 0X07C4]
00CA FFFA 07C4 001B       SVC       #51 write string
00CD FFFC 001B            PUSH      #memory[EA = 0X00CF] = 0X0004
00D1 FFFA 0004 001B       PUSH      #memory[EA = 0X00D3] = 0X0005
00D5 FFF8 0005 0004  001B ADDI      0X0009 = 0X0004 + 0X0005
00D6 FFFA 0009 001B       SVC       #11 write integer
4 mash 5   = 9
00D9 FFFC 001B            SVC       #42 write ENDL
00DC FFFC 001B            PUSHA     SB(163) memory[EA = 0X07E2]
00E0 FFFA 07E2 001B       SVC       #51 write string
00E3 FFFC 001B            PUSH      #memory[EA = 0X00E5] = 0X0008
00E7 FFFA 0008 001B       PUSH      #memory[EA = 0X00E9] = 0X0003
00EB FFF8 0003 0008  001B SUBI      0X0005 = 0X0008 - 0X0003
00EC FFFA 0005 001B       SVC       #11 write integer
8 - 3      = 5
00EF FFFC 001B            SVC       #42 write ENDL
00F2 FFFC 001B            PUSHA     SB(178) memory[EA = 0X0800]
00F6 FFFA 0800 001B       SVC       #51 write string
00F9 FFFC 001B            PUSH      #memory[EA = 0X00FB] = 0X0008
00FD FFFA 0008 001B       PUSH      #memory[EA = 0X00FF] = 0X0003
0101 FFF8 0003 0008  001B SUBI      0X0005 = 0X0008 - 0X0003
0102 FFFA 0005 001B       SVC       #11 write integer
8 peel 3   = 5
0105 FFFC 001B            SVC       #42 write ENDL
0108 FFFC 001B            PUSHA     SB(193) memory[EA = 0X081E]
010C FFFA 081E 001B       SVC       #51 write string
010F FFFC 001B            PUSH      #memory[EA = 0X0111] = 0X0006
0113 FFFA 0006 001B       PUSH      #memory[EA = 0X0115] = 0X0007
0117 FFF8 0007 0006  001B MULI      0X002A = 0X0006 * 0X0007
0118 FFFA 002A 001B       SVC       #11 write integer
6 * 2      = 42
011B FFFC 001B            SVC       #42 write ENDL
011E FFFC 001B            PUSHA     SB(208) memory[EA = 0X083C]
0122 FFFA 083C 001B       SVC       #51 write string
0125 FFFC 001B            PUSH      #memory[EA = 0X0127] = 0X0006
0129 FFFA 0006 001B       PUSH      #memory[EA = 0X012B] = 0X0007
012D FFF8 0007 0006  001B MULI      0X002A = 0X0006 * 0X0007
012E FFFA 002A 001B       SVC       #11 write integer
6 fry 2    = 42
0131 FFFC 001B            SVC       #42 write ENDL
0134 FFFC 001B            PUSHA     SB(223) memory[EA = 0X085A]
0138 FFFA 085A 001B       SVC       #51 write string
013B FFFC 001B            PUSH      #memory[EA = 0X013D] = 0X000A
013F FFFA 000A 001B       PUSH      #memory[EA = 0X0141] = 0X0002
0143 FFF8 0002 000A  001B DIVI      0X0005 = 0X000A / 0X0002
0144 FFFA 0005 001B       SVC       #11 write integer
10 / 2     = 5
0147 FFFC 001B            SVC       #42 write ENDL
014A FFFC 001B            PUSHA     SB(238) memory[EA = 0X0878]
014E FFFA 0878 001B       SVC       #51 write string
0151 FFFC 001B            PUSH      #memory[EA = 0X0153] = 0X000A
0155 FFFA 000A 001B       PUSH      #memory[EA = 0X0157] = 0X0002
0159 FFF8 0002 000A  001B DIVI      0X0005 = 0X000A / 0X0002
015A FFFA 0005 001B       SVC       #11 write integer
10 slice 2 = 5
015D FFFC 001B            SVC       #42 write ENDL
0160 FFFC 001B            PUSHA     SB(253) memory[EA = 0X0896]
0164 FFFA 0896 001B       SVC       #51 write string
0167 FFFC 001B            PUSH      #memory[EA = 0X0169] = 0X0007
016B FFFA 0007 001B       PUSH      #memory[EA = 0X016D] = 0X0003
016F FFF8 0003 0007  001B REMI      0X0001 = 0X0007 3069C
0170 FFFA 0001 001B       SVC       #11 write integer
7 % 3      = 1
0173 FFFC 001B            SVC       #42 write ENDL
0176 FFFC 001B            PUSHA     SB(268) memory[EA = 0X08B4]
017A FFFA 08B4 001B       SVC       #51 write string
017D FFFC 001B            PUSH      #memory[EA = 0X017F] = 0X0007
0181 FFFA 0007 001B       PUSH      #memory[EA = 0X0183] = 0X0003
0185 FFF8 0003 0007  001B REMI      0X0001 = 0X0007 3069C
0186 FFFA 0001 001B       SVC       #11 write integer
7 mod 3    = 1
0189 FFFC 001B            SVC       #42 write ENDL
018C FFFC 001B            PUSHA     SB(283) memory[EA = 0X08D2]
0190 FFFA 08D2 001B       SVC       #51 write string
0193 FFFC 001B            PUSH      #memory[EA = 0X0195] = 0X0002
0197 FFFA 0002 001B       PUSH      #memory[EA = 0X0199] = 0X0003
019B FFF8 0003 0002  001B POWI      0X0008 = 0X0002 ^ 0X0003
019C FFFA 0008 001B       SVC       #11 write integer
2 ^ 3      = 8
019F FFFC 001B            SVC       #42 write ENDL
01A2 FFFC 001B            PUSHA     SB(298) memory[EA = 0X08F0]
01A6 FFFA 08F0 001B       SVC       #51 write string
01A9 FFFC 001B            PUSH      #memory[EA = 0X01AB] = 0X0002
01AD FFFA 0002 001B       PUSH      #memory[EA = 0X01AF] = 0X0003
01B1 FFF8 0003 0002  001B POWI      0X0008 = 0X0002 ^ 0X0003
01B2 FFFA 0008 001B       SVC       #11 write integer
2 pow 3    = 8
01B5 FFFC 001B            SVC       #42 write ENDL
01B8 FFFC 001B            PUSHA     SB(313) memory[EA = 0X090E]
01BC FFFA 090E 001B       SVC       #51 write string
01BF FFFC 001B            PUSH      #memory[EA = 0X01C1] = 0X0004
01C3 FFFA 0004 001B       PUSH      #memory[EA = 0X01C5] = 0X0006
01C7 FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
01C8 FFFC 001B            JMPE      0X01D2 LEG = 100
01CB FFFC 001B            PUSH      #memory[EA = 0X01CD] = 0X0000
01CF FFFA 0000 001B       JMP       0X01D6
01D6 FFFA 0000 001B       SVC       #31 write boolean 0X0000
4 == 6                = F
01D9 FFFC 001B            SVC       #42 write ENDL
01DC FFFC 001B            PUSHA     SB(339) memory[EA = 0X0942]
01E0 FFFA 0942 001B       SVC       #51 write string
01E3 FFFC 001B            PUSH      #memory[EA = 0X01E5] = 0X0004
01E7 FFFA 0004 001B       PUSH      #memory[EA = 0X01E9] = 0X0006
01EB FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
01EC FFFC 001B            JMPE      0X01F6 LEG = 100
01EF FFFC 001B            PUSH      #memory[EA = 0X01F1] = 0X0000
01F3 FFFA 0000 001B       JMP       0X01FA
01FA FFFA 0000 001B       SVC       #31 write boolean 0X0000
4 spudMatch 6         = F
01FD FFFC 001B            SVC       #42 write ENDL
0200 FFFC 001B            PUSHA     SB(365) memory[EA = 0X0976]
0204 FFFA 0976 001B       SVC       #51 write string
0207 FFFC 001B            PUSH      #memory[EA = 0X0209] = 0X0004
020B FFFA 0004 001B       PUSH      #memory[EA = 0X020D] = 0X0006
020F FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
0210 FFFC 001B            JMPNE     0X021A LEG = 100
021A FFFC 001B            PUSH      #memory[EA = 0X021C] = 0XFFFF
021E FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
4 != 6                = T
0221 FFFC 001B            SVC       #42 write ENDL
0224 FFFC 001B            PUSHA     SB(391) memory[EA = 0X09AA]
0228 FFFA 09AA 001B       SVC       #51 write string
022B FFFC 001B            PUSH      #memory[EA = 0X022D] = 0X0004
022F FFFA 0004 001B       PUSH      #memory[EA = 0X0231] = 0X0006
0233 FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
0234 FFFC 001B            JMPNE     0X023E LEG = 100
023E FFFC 001B            PUSH      #memory[EA = 0X0240] = 0XFFFF
0242 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
4 mashApart 6         = T
0245 FFFC 001B            SVC       #42 write ENDL
0248 FFFC 001B            PUSHA     SB(417) memory[EA = 0X09DE]
024C FFFA 09DE 001B       SVC       #51 write string
024F FFFC 001B            PUSH      #memory[EA = 0X0251] = 0X0004
0253 FFFA 0004 001B       PUSH      #memory[EA = 0X0255] = 0X0006
0257 FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
0258 FFFC 001B            JMPL      0X0262 LEG = 100
0262 FFFC 001B            PUSH      #memory[EA = 0X0264] = 0XFFFF
0266 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
4 < 6                 = T
0269 FFFC 001B            SVC       #42 write ENDL
026C FFFC 001B            PUSHA     SB(443) memory[EA = 0X0A12]
0270 FFFA 0A12 001B       SVC       #51 write string
0273 FFFC 001B            PUSH      #memory[EA = 0X0275] = 0X0004
0277 FFFA 0004 001B       PUSH      #memory[EA = 0X0279] = 0X0006
027B FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
027C FFFC 001B            JMPL      0X0286 LEG = 100
0286 FFFC 001B            PUSH      #memory[EA = 0X0288] = 0XFFFF
028A FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
4 smallerSpud 6       = T
028D FFFC 001B            SVC       #42 write ENDL
0290 FFFC 001B            PUSHA     SB(469) memory[EA = 0X0A46]
0294 FFFA 0A46 001B       SVC       #51 write string
0297 FFFC 001B            PUSH      #memory[EA = 0X0299] = 0X0004
029B FFFA 0004 001B       PUSH      #memory[EA = 0X029D] = 0X0006
029F FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
02A0 FFFC 001B            JMPG      0X02AA LEG = 100
02A3 FFFC 001B            PUSH      #memory[EA = 0X02A5] = 0X0000
02A7 FFFA 0000 001B       JMP       0X02AE
02AE FFFA 0000 001B       SVC       #31 write boolean 0X0000
4 > 6                 = F
02B1 FFFC 001B            SVC       #42 write ENDL
02B4 FFFC 001B            PUSHA     SB(495) memory[EA = 0X0A7A]
02B8 FFFA 0A7A 001B       SVC       #51 write string
02BB FFFC 001B            PUSH      #memory[EA = 0X02BD] = 0X0004
02BF FFFA 0004 001B       PUSH      #memory[EA = 0X02C1] = 0X0006
02C3 FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
02C4 FFFC 001B            JMPG      0X02CE LEG = 100
02C7 FFFC 001B            PUSH      #memory[EA = 0X02C9] = 0X0000
02CB FFFA 0000 001B       JMP       0X02D2
02D2 FFFA 0000 001B       SVC       #31 write boolean 0X0000
4 biggerSpud 6        = F
02D5 FFFC 001B            SVC       #42 write ENDL
02D8 FFFC 001B            PUSHA     SB(521) memory[EA = 0X0AAE]
02DC FFFA 0AAE 001B       SVC       #51 write string
02DF FFFC 001B            PUSH      #memory[EA = 0X02E1] = 0X0004
02E3 FFFA 0004 001B       PUSH      #memory[EA = 0X02E5] = 0X0006
02E7 FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
02E8 FFFC 001B            JMPLE     0X02F2 LEG = 100
02F2 FFFC 001B            PUSH      #memory[EA = 0X02F4] = 0XFFFF
02F6 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
4 <= 6                = T
02F9 FFFC 001B            SVC       #42 write ENDL
02FC FFFC 001B            PUSHA     SB(547) memory[EA = 0X0AE2]
0300 FFFA 0AE2 001B       SVC       #51 write string
0303 FFFC 001B            PUSH      #memory[EA = 0X0305] = 0X0004
0307 FFFA 0004 001B       PUSH      #memory[EA = 0X0309] = 0X0006
030B FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
030C FFFC 001B            JMPLE     0X0316 LEG = 100
0316 FFFC 001B            PUSH      #memory[EA = 0X0318] = 0XFFFF
031A FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
4 notBiggerSpud 6     = T
031D FFFC 001B            SVC       #42 write ENDL
0320 FFFC 001B            PUSHA     SB(573) memory[EA = 0X0B16]
0324 FFFA 0B16 001B       SVC       #51 write string
0327 FFFC 001B            PUSH      #memory[EA = 0X0329] = 0X0004
032B FFFA 0004 001B       PUSH      #memory[EA = 0X032D] = 0X0006
032F FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
0330 FFFC 001B            JMPGE     0X033A LEG = 100
0333 FFFC 001B            PUSH      #memory[EA = 0X0335] = 0X0000
0337 FFFA 0000 001B       JMP       0X033E
033E FFFA 0000 001B       SVC       #31 write boolean 0X0000
4 >= 6                = F
0341 FFFC 001B            SVC       #42 write ENDL
0344 FFFC 001B            PUSHA     SB(599) memory[EA = 0X0B4A]
0348 FFFA 0B4A 001B       SVC       #51 write string
034B FFFC 001B            PUSH      #memory[EA = 0X034D] = 0X0004
034F FFFA 0004 001B       PUSH      #memory[EA = 0X0351] = 0X0006
0353 FFF8 0006 0004  001B CMPI      0X0004 ? 0X0006 LEG = 100
0354 FFFC 001B            JMPGE     0X035E LEG = 100
0357 FFFC 001B            PUSH      #memory[EA = 0X0359] = 0X0000
035B FFFA 0000 001B       JMP       0X0362
0362 FFFA 0000 001B       SVC       #31 write boolean 0X0000
4 notSmallerSpud 6    = F
0365 FFFC 001B            SVC       #42 write ENDL
0368 FFFC 001B            PUSHA     SB(625) memory[EA = 0X0B7E]
036C FFFA 0B7E 001B       SVC       #51 write string
036F FFFC 001B            PUSH      #memory[EA = 0X0371] = 0XFFFF
0373 FFFA FFFF 001B       PUSH      #memory[EA = 0X0375] = 0XFFFF
0377 FFF8 FFFF FFFF  001B AND       T = T AND T
0378 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
true && true          = T
037B FFFC 001B            SVC       #42 write ENDL
037E FFFC 001B            PUSHA     SB(651) memory[EA = 0X0BB2]
0382 FFFA 0BB2 001B       SVC       #51 write string
0385 FFFC 001B            PUSH      #memory[EA = 0X0387] = 0XFFFF
0389 FFFA FFFF 001B       PUSH      #memory[EA = 0X038B] = 0XFFFF
038D FFF8 FFFF FFFF  001B AND       T = T AND T
038E FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
true prep true        = T
0391 FFFC 001B            SVC       #42 write ENDL
0394 FFFC 001B            PUSHA     SB(677) memory[EA = 0X0BE6]
0398 FFFA 0BE6 001B       SVC       #51 write string
039B FFFC 001B            PUSH      #memory[EA = 0X039D] = 0XFFFF
039F FFFA FFFF 001B       PUSH      #memory[EA = 0X03A1] = 0X0000
03A3 FFF8 0000 FFFF  001B AND       F = T AND F
03A4 FFFA 0000 001B       SVC       #31 write boolean 0X0000
true && false         = F
03A7 FFFC 001B            SVC       #42 write ENDL
03AA FFFC 001B            PUSHA     SB(703) memory[EA = 0X0C1A]
03AE FFFA 0C1A 001B       SVC       #51 write string
03B1 FFFC 001B            PUSH      #memory[EA = 0X03B3] = 0XFFFF
03B5 FFFA FFFF 001B       PUSH      #memory[EA = 0X03B7] = 0X0000
03B9 FFF8 0000 FFFF  001B AND       F = T AND F
03BA FFFA 0000 001B       SVC       #31 write boolean 0X0000
true prep false       = F
03BD FFFC 001B            SVC       #42 write ENDL
03C0 FFFC 001B            PUSHA     SB(729) memory[EA = 0X0C4E]
03C4 FFFA 0C4E 001B       SVC       #51 write string
03C7 FFFC 001B            PUSH      #memory[EA = 0X03C9] = 0X0000
03CB FFFA 0000 001B       PUSH      #memory[EA = 0X03CD] = 0X0000
03CF FFF8 0000 0000  001B AND       F = F AND F
03D0 FFFA 0000 001B       SVC       #31 write boolean 0X0000
false && false        = F
03D3 FFFC 001B            SVC       #42 write ENDL
03D6 FFFC 001B            PUSHA     SB(755) memory[EA = 0X0C82]
03DA FFFA 0C82 001B       SVC       #51 write string
03DD FFFC 001B            PUSH      #memory[EA = 0X03DF] = 0X0000
03E1 FFFA 0000 001B       PUSH      #memory[EA = 0X03E3] = 0X0000
03E5 FFF8 0000 0000  001B AND       F = F AND F
03E6 FFFA 0000 001B       SVC       #31 write boolean 0X0000
false prep false      = F
03E9 FFFC 001B            SVC       #42 write ENDL
03EC FFFC 001B            PUSHA     SB(781) memory[EA = 0X0CB6]
03F0 FFFA 0CB6 001B       SVC       #51 write string
03F3 FFFC 001B            PUSH      #memory[EA = 0X03F5] = 0XFFFF
03F7 FFFA FFFF 001B       PUSH      #memory[EA = 0X03F9] = 0XFFFF
03FB FFF8 FFFF FFFF  001B OR        T = T OR T
03FC FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
true \\ true          = T
03FF FFFC 001B            SVC       #42 write ENDL
0402 FFFC 001B            PUSHA     SB(809) memory[EA = 0X0CEE]
0406 FFFA 0CEE 001B       SVC       #51 write string
0409 FFFC 001B            PUSH      #memory[EA = 0X040B] = 0XFFFF
040D FFFA FFFF 001B       PUSH      #memory[EA = 0X040F] = 0XFFFF
0411 FFF8 FFFF FFFF  001B OR        T = T OR T
0412 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
true mix true         = T
0415 FFFC 001B            SVC       #42 write ENDL
0418 FFFC 001B            PUSHA     SB(835) memory[EA = 0X0D22]
041C FFFA 0D22 001B       SVC       #51 write string
041F FFFC 001B            PUSH      #memory[EA = 0X0421] = 0XFFFF
0423 FFFA FFFF 001B       PUSH      #memory[EA = 0X0425] = 0X0000
0427 FFF8 0000 FFFF  001B OR        T = T OR F
0428 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
true \\ false         = T
042B FFFC 001B            SVC       #42 write ENDL
042E FFFC 001B            PUSHA     SB(863) memory[EA = 0X0D5A]
0432 FFFA 0D5A 001B       SVC       #51 write string
0435 FFFC 001B            PUSH      #memory[EA = 0X0437] = 0XFFFF
0439 FFFA FFFF 001B       PUSH      #memory[EA = 0X043B] = 0X0000
043D FFF8 0000 FFFF  001B OR        T = T OR F
043E FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
true mix false        = T
0441 FFFC 001B            SVC       #42 write ENDL
0444 FFFC 001B            PUSHA     SB(889) memory[EA = 0X0D8E]
0448 FFFA 0D8E 001B       SVC       #51 write string
044B FFFC 001B            PUSH      #memory[EA = 0X044D] = 0X0000
044F FFFA 0000 001B       PUSH      #memory[EA = 0X0451] = 0X0000
0453 FFF8 0000 0000  001B OR        F = F OR F
0454 FFFA 0000 001B       SVC       #31 write boolean 0X0000
false \\ false        = F
0457 FFFC 001B            SVC       #42 write ENDL
045A FFFC 001B            PUSHA     SB(917) memory[EA = 0X0DC6]
045E FFFA 0DC6 001B       SVC       #51 write string
0461 FFFC 001B            PUSH      #memory[EA = 0X0463] = 0X0000
0465 FFFA 0000 001B       PUSH      #memory[EA = 0X0467] = 0X0000
0469 FFF8 0000 0000  001B OR        F = F OR F
046A FFFA 0000 001B       SVC       #31 write boolean 0X0000
false mix false       = F
046D FFFC 001B            SVC       #42 write ENDL
0470 FFFC 001B            PUSHA     SB(943) memory[EA = 0X0DFA]
0474 FFFA 0DFA 001B       SVC       #51 write string
0477 FFFC 001B            PUSH      #memory[EA = 0X0479] = 0X0000
047B FFFA 0000 001B       PUSH      #memory[EA = 0X047D] = 0XFFFF
047F FFF8 FFFF 0000  001B NOR       F = F NOR T
0480 FFFA 0000 001B       SVC       #31 write boolean 0X0000
false spudStop true   = F
0483 FFFC 001B            SVC       #42 write ENDL
0486 FFFC 001B            PUSHA     SB(969) memory[EA = 0X0E2E]
048A FFFA 0E2E 001B       SVC       #51 write string
048D FFFC 001B            PUSH      #memory[EA = 0X048F] = 0X0000
0491 FFFA 0000 001B       PUSH      #memory[EA = 0X0493] = 0XFFFF
0495 FFF8 FFFF 0000  001B NOR       F = F NOR T
0496 FFFA 0000 001B       SVC       #31 write boolean 0X0000
false ~\ true         = F
0499 FFFC 001B            SVC       #42 write ENDL
049C FFFC 001B            PUSHA     SB(996) memory[EA = 0X0E64]
04A0 FFFA 0E64 001B       SVC       #51 write string
04A3 FFFC 001B            PUSH      #memory[EA = 0X04A5] = 0X0000
04A7 FFFA 0000 001B       PUSH      #memory[EA = 0X04A9] = 0X0000
04AB FFF8 0000 0000  001B NOR       T = F NOR F
04AC FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
false spudStop false  = T
04AF FFFC 001B            SVC       #42 write ENDL
04B2 FFFC 001B            PUSHA     SB(1022) memory[EA = 0X0E98]
04B6 FFFA 0E98 001B       SVC       #51 write string
04B9 FFFC 001B            PUSH      #memory[EA = 0X04BB] = 0X0000
04BD FFFA 0000 001B       PUSH      #memory[EA = 0X04BF] = 0X0000
04C1 FFF8 0000 0000  001B NOR       T = F NOR F
04C2 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
false ~\ false        = T
04C5 FFFC 001B            SVC       #42 write ENDL
04C8 FFFC 001B            PUSHA     SB(1049) memory[EA = 0X0ECE]
04CC FFFA 0ECE 001B       SVC       #51 write string
04CF FFFC 001B            PUSH      #memory[EA = 0X04D1] = 0XFFFF
04D3 FFFA FFFF 001B       PUSH      #memory[EA = 0X04D5] = 0XFFFF
04D7 FFF8 FFFF FFFF  001B XOR       F = T XOR T
04D8 FFFA 0000 001B       SVC       #31 write boolean 0X0000
true eitherSpud true  = F
04DB FFFC 001B            SVC       #42 write ENDL
04DE FFFC 001B            PUSHA     SB(1075) memory[EA = 0X0F02]
04E2 FFFA 0F02 001B       SVC       #51 write string
04E5 FFFC 001B            PUSH      #memory[EA = 0X04E7] = 0XFFFF
04E9 FFFA FFFF 001B       PUSH      #memory[EA = 0X04EB] = 0XFFFF
04ED FFF8 FFFF FFFF  001B XOR       F = T XOR T
04EE FFFA 0000 001B       SVC       #31 write boolean 0X0000
true +\ true          = F
04F1 FFFC 001B            SVC       #42 write ENDL
04F4 FFFC 001B            PUSHA     SB(1102) memory[EA = 0X0F38]
04F8 FFFA 0F38 001B       SVC       #51 write string
04FB FFFC 001B            PUSH      #memory[EA = 0X04FD] = 0XFFFF
04FF FFFA FFFF 001B       PUSH      #memory[EA = 0X0501] = 0X0000
0503 FFF8 0000 FFFF  001B XOR       T = T XOR F
0504 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
true eitherSpud false = T
0507 FFFC 001B            SVC       #42 write ENDL
050A FFFC 001B            PUSHA     SB(1128) memory[EA = 0X0F6C]
050E FFFA 0F6C 001B       SVC       #51 write string
0511 FFFC 001B            PUSH      #memory[EA = 0X0513] = 0XFFFF
0515 FFFA FFFF 001B       PUSH      #memory[EA = 0X0517] = 0X0000
0519 FFF8 0000 FFFF  001B XOR       T = T XOR F
051A FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
true +\ false         = T
051D FFFC 001B            SVC       #42 write ENDL
0520 FFFC 001B            PUSHA     SB(1155) memory[EA = 0X0FA2]
0524 FFFA 0FA2 001B       SVC       #51 write string
0527 FFFC 001B            PUSH      #memory[EA = 0X0529] = 0X0000
052B FFFA 0000 001B       PUSH      #memory[EA = 0X052D] = 0X0000
052F FFF8 0000 0000  001B XOR       F = F XOR F
0530 FFFA 0000 001B       SVC       #31 write boolean 0X0000
false eitherSpud false= F
0533 FFFC 001B            SVC       #42 write ENDL
0536 FFFC 001B            PUSHA     SB(1181) memory[EA = 0X0FD6]
053A FFFA 0FD6 001B       SVC       #51 write string
053D FFFC 001B            PUSH      #memory[EA = 0X053F] = 0X0000
0541 FFFA 0000 001B       PUSH      #memory[EA = 0X0543] = 0X0000
0545 FFF8 0000 0000  001B XOR       F = F XOR F
0546 FFFA 0000 001B       SVC       #31 write boolean 0X0000
false +\ false        = F
0549 FFFC 001B            SVC       #42 write ENDL
054C FFFC 001B            PUSHA     SB(1208) memory[EA = 0X100C]
0550 FFFA 100C 001B       SVC       #51 write string
0553 FFFC 001B            PUSH      #memory[EA = 0X0555] = 0X0000
0557 FFFA 0000 001B       PUSH      #memory[EA = 0X0559] = 0XFFFF
055B FFF8 FFFF 0000  001B NAND      T = F NAND T
055C FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
false mashless true   = T
055F FFFC 001B            SVC       #42 write ENDL
0562 FFFC 001B            PUSHA     SB(1234) memory[EA = 0X1040]
0566 FFFA 1040 001B       SVC       #51 write string
0569 FFFC 001B            PUSH      #memory[EA = 0X056B] = 0X0000
056D FFFA 0000 001B       PUSH      #memory[EA = 0X056F] = 0XFFFF
0571 FFF8 FFFF 0000  001B NAND      T = F NAND T
0572 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
false ~& true         = T
0575 FFFC 001B            SVC       #42 write ENDL
0578 FFFC 001B            PUSHA     SB(1260) memory[EA = 0X1074]
057C FFFA 1074 001B       SVC       #51 write string
057F FFFC 001B            PUSH      #memory[EA = 0X0581] = 0X0000
0583 FFFA 0000 001B       PUSH      #memory[EA = 0X0585] = 0X0000
0587 FFF8 0000 0000  001B NAND      T = F NAND F
0588 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
false mashless false  = T
058B FFFC 001B            SVC       #42 write ENDL
058E FFFC 001B            PUSHA     SB(1286) memory[EA = 0X10A8]
0592 FFFA 10A8 001B       SVC       #51 write string
0595 FFFC 001B            PUSH      #memory[EA = 0X0597] = 0X0000
0599 FFFA 0000 001B       PUSH      #memory[EA = 0X059B] = 0X0000
059D FFF8 0000 0000  001B NAND      T = F NAND F
059E FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
false ~& false        = T
05A1 FFFC 001B            SVC       #42 write ENDL
05A4 FFFC 001B            PUSHA     SB(1312) memory[EA = 0X10DC]
05A8 FFFA 10DC 001B       SVC       #51 write string
05AB FFFC 001B            PUSH      #memory[EA = 0X05AD] = 0XFFFF
05AF FFFA FFFF 001B       PUSH      #memory[EA = 0X05B1] = 0XFFFF
05B3 FFF8 FFFF FFFF  001B NAND      F = T NAND T
05B4 FFFA 0000 001B       SVC       #31 write boolean 0X0000
true mashless true    = F
05B7 FFFC 001B            SVC       #42 write ENDL
05BA FFFC 001B            PUSHA     SB(1338) memory[EA = 0X1110]
05BE FFFA 1110 001B       SVC       #51 write string
05C1 FFFC 001B            PUSH      #memory[EA = 0X05C3] = 0XFFFF
05C5 FFFA FFFF 001B       PUSH      #memory[EA = 0X05C7] = 0XFFFF
05C9 FFF8 FFFF FFFF  001B NAND      F = T NAND T
05CA FFFA 0000 001B       SVC       #31 write boolean 0X0000
true ~& true          = F
05CD FFFC 001B            SVC       #42 write ENDL
05D0 FFFC 001B            PUSHA     SB(1364) memory[EA = 0X1144]
05D4 FFFA 1144 001B       SVC       #51 write string
05D7 FFFC 001B            PUSH      #memory[EA = 0X05D9] = 0XFFFF
05DB FFFA FFFF 001B       PUSH      #memory[EA = 0X05DD] = 0X0000
05DF FFF8 0000 FFFF  001B NAND      T = T NAND F
05E0 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
true mashless false   = T
05E3 FFFC 001B            SVC       #42 write ENDL
05E6 FFFC 001B            PUSHA     SB(1390) memory[EA = 0X1178]
05EA FFFA 1178 001B       SVC       #51 write string
05ED FFFC 001B            PUSH      #memory[EA = 0X05EF] = 0XFFFF
05F1 FFFA FFFF 001B       PUSH      #memory[EA = 0X05F3] = 0X0000
05F5 FFF8 0000 FFFF  001B NAND      T = T NAND F
05F6 FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
true ~& false         = T
05F9 FFFC 001B            SVC       #42 write ENDL
05FC FFFC 001B            PUSHA     SB(1416) memory[EA = 0X11AC]
0600 FFFA 11AC 001B       SVC       #51 write string
0603 FFFC 001B            PUSH      #memory[EA = 0X0605] = 0XFFFF
0607 FFFA FFFF 001B       NOT       F = NOT T
0608 FFFA 0000 001B       SVC       #31 write boolean 0X0000
!true                 = F
060B FFFC 001B            SVC       #42 write ENDL
060E FFFC 001B            PUSHA     SB(1442) memory[EA = 0X11E0]
0612 FFFA 11E0 001B       SVC       #51 write string
0615 FFFC 001B            PUSH      #memory[EA = 0X0617] = 0XFFFF
0619 FFFA FFFF 001B       NOT       F = NOT T
061A FFFA 0000 001B       SVC       #31 write boolean 0X0000
raw true              = F
061D FFFC 001B            SVC       #42 write ENDL
0620 FFFC 001B            PUSHA     SB(1468) memory[EA = 0X1214]
0624 FFFA 1214 001B       SVC       #51 write string
0627 FFFC 001B            PUSH      #memory[EA = 0X0629] = 0X0000
062B FFFA 0000 001B       NOT       T = NOT F
062C FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
!false                = T
062F FFFC 001B            SVC       #42 write ENDL
0632 FFFC 001B            PUSHA     SB(1494) memory[EA = 0X1248]
0636 FFFA 1248 001B       SVC       #51 write string
0639 FFFC 001B            PUSH      #memory[EA = 0X063B] = 0X0000
063D FFFA 0000 001B       NOT       T = NOT F
063E FFFA FFFF 001B       SVC       #31 write boolean 0XFFFF
raw false             = T
0641 FFFC 001B            SVC       #42 write ENDL
0644 FFFC 001B            RETURN    to 0X001B
001B FFFE                 PUSHA     SB(  0) memory[EA = 0X069C]
001F FFFC 069C            SVC       #51 write string
Normal program termination
0022 FFFE                 SVC       #42 write ENDL
0025 FFFE                 PUSH      #memory[EA = 0X0027] = 0X0000
0029 FFFC 0000            SVC       #1 terminate program with status 0, SP = 0XFFFE

