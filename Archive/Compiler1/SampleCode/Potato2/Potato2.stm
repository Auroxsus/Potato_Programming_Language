;--------------------------------------------------------------
; Potato2.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 || ------------------------------------------------------------
;    2 || Auroxsus
;    3 || Description: POTATO Scanner program
;    4 || Potato2.p
;    5 || ------------------------------------------------------------
;    6 crisp mainCrisp () {
;    7    bite "Howdy"
; **** =========
; **** PROGRAM module (   6)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0010
                       PUSHA     SB:0D0
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE
PROGRAMBODY0010        EQU       *
;    8    bite "," + " " + "world" + "!"
; **** PRINT statement (   7)
                       PUSHA     SB:0D28
                       SVC       #SVC_WRITE_STRING
; **** PRINT statement (   8)
                       PUSHA     SB:0D35
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D38
                       SVC       #SVC_WRITE_STRING
;    9    bite ENDL
                       PUSHA     SB:0D41
                       SVC       #SVC_WRITE_STRING
;   10 }
;   11 
                       PUSHA     SB:0D48
                       SVC       #SVC_WRITE_STRING
;   12 
; **** PRINT statement (   9)
                       SVC       #SVC_WRITE_ENDL
                       RETURN    
; **** =========
; **** END (  12)
; **** =========
;--------------------------------------------------------------
; Common subroutines
;--------------------------------------------------------------
CHRIsInRange           EQU       *                    ; CHR,LB,UB,RA
                       PUSH      SP:0D2               ; CHR,LB,UB,RA,LB
                       PUSH      SP:0D4               ; CHR,LB,UB,RA,LB,CHR
                       CMPI                           ; CHR,LB,UB,RA (set LEG)
                       JMPG      F0030                ; CHR,LB,UB,RA
                       PUSH      SP:0D3               ; CHR,LB,UB,RA,CHR
                       PUSH      SP:0D2               ; CHR,LB,UB,RA,CHR,UB
                       CMPI                           ; CHR,LB,UB,RA (set LEG)
                       JMPG      F0030                ; CHR,LB,UB,RA
T0020                  EQU       *                    ; CHR,LB,UB,RA
                       SWAP                           ; CHR,LB,RA,UB
                       DISCARD   #0D1                 ; CHR,LB,RA
                       SWAP                           ; CHR,RA,LB
                       DISCARD   #0D1                 ; CHR,RA
                       PUSH      #0XFFFF              ; CHR,RA,true
                       SWAP                           ; CHR,true,RA
                       JMP       E0040                ; CHR,true,RA
F0030                  EQU       *                    ; CHR,LB,UB,RA
                       SWAP                           ; CHR,LB,RA,UB
                       DISCARD   #0D1                 ; CHR,LB,RA
                       SWAP                           ; CHR,RA,LB
                       DISCARD   #0D1                 ; CHR,RA
                       PUSH      #0X0000              ; CHR,RA,false
                       SWAP                           ; CHR,false,RA
E0040                  EQU       *                    ; CHR,true-or-false,RA
                       RETURN                         ; CHR,true-or-false,RA
;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D51
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D69
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE
;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       DS        "Normal program termination"
                       DS        "Howdy"
                       DS        ","
                       DS        " "
                       DS        "world"
                       DS        "!"
                       DS        "Run-time error #"
                       DS        " near line #"
;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future SPL syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0010000000000000   ; 8K bytes = 4K words
;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
