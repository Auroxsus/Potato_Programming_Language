;--------------------------------------------------------------
; extrapotato.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 || ExtraPotato.cpp by Auroxsus
;    2 || French Fry Productions
;    3 || Description: testing <DO2WHILEStatement> 
;    4 ||-----------------------------------------------------------
;    5 
;    6 POTATO
;    7    VAR n INT,i INT.
; **** =========
; **** PROGRAM module (   6)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0010
                       PUSHA     SB:0D0
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE

PROGRAMBODY0010        EQU       *
;    8 
;    9    INPUT "n? " n.
;   10 
;   11    FRY "DO2-WHILE loop",PEEL.
; **** INPUT statement (   9)
                       PUSHA     SB:0D30
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D28
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** PRINT statement (  11)
;   12    
                       PUSHA     SB:0D35
                       SVC       #SVC_WRITE_STRING
;   13    i = 1.
                       SVC       #SVC_WRITE_ENDL
;   14    DO2
; **** assignment statement (  13)
                       PUSHA     SB:0D29
;   15       fry i,peel.
                       PUSH      #0D1
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** DO2-WHILE statement (  14)
D0020                  EQU       *
; **** PRINT statement (  15)
;   16       i = ++i.
                       PUSH      SB:0D29
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
;   17    WHILE ( i <= n ).
; **** assignment statement (  16)
                       PUSHA     SB:0D29
                       PUSHA     SB:0D29
                       PUSH      @SP:0D0
                       PUSH      #0D1
                       ADDI      
                       POP       @SP:0D1
                       PUSH      @SP:0D0
                       SWAP      
                       DISCARD   #0D1
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
                       PUSH      SB:0D29
;   18 COOKEDPOTATO
                       PUSH      SB:0D28
                       CMPI      
                       JMPLE     T0040
                       PUSH      #0X0000
                       JMP       E0050
T0040                  PUSH      #0XFFFF
E0050                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     E0030
                       JMP       D0020
E0030                  EQU       *
                       RETURN    
; **** =========
; **** END (  18)
; **** =========

;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D51
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D69
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE

;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       DS        "Normal program termination"
                       RW        0D1                  ; n
                       RW        0D1                  ; i
                       DS        "n? "
                       DS        "DO2-WHILE loop"
                       DS        "Run-time error #"
                       DS        " near line #"

;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future POTATO syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words

;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
