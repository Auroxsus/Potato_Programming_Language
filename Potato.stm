;--------------------------------------------------------------
; Potato.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 || Potato.p by Auroxsus
;    2 || French Fry Productions
;    3 || Description: testing subprogram
;    4 ||-----------------------------------------------------------
;    5 
;    6 VAR INT x, INT y.
;    7 
;    8 PROCEDURE P(IN INT in1, OUT INT out1, IO INT io1, REF BOOL ref1)
; **** =========
; **** PROCEDURE module (   8)
; **** =========
P                      EQU       *
;    9    CON INT C1 = 101.
;   10    
;   11    out1 = in1+C1.
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D16                ; n = 6
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D2                 ; m = 1
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       PUSH      #                   ; initialize constant C1
                       POP       FB:0D8
                       CALL      MODULEBODY0010
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D16
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0010         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** assignment statement (  11)
                       PUSHA     FB:0D2
;   12    io1 = io1+1.
                       PUSH      FB:0D0
                       PUSH      FB:0D8
                       ADDI      
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** assignment statement (  12)
                       PUSHA     FB:0D4
;   13    ref1 = NOT ref1.
                       PUSH      FB:0D4
                       PUSH      #0D1
                       ADDI      
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** assignment statement (  13)
                       PUSHA     @FB:0D5
;   14 COOKEDPOTATO
;   15 
;   16 POTATO
                       PUSH      @FB:0D5
;   17    CON INT P1 = 1.
                       NOT       
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
                       RETURN    

; **** =========
; **** END (  14)
; **** =========
; **** =========
; **** PROGRAM module (  16)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0020
                       PUSHA     SB:0D2
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE

PROGRAMBODY0020        EQU       *
;   18 
;   19    VAR INT P2, INT P3.
;   20    VAR BOOL P4.
;   21 
;   22    P3 = 3.
;   23    P4 = TRUE.
; **** assignment statement (  22)
                       PUSHA     SB:0D32
                       PUSH      #0D3
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
;   24    
; **** assignment statement (  23)
                       PUSHA     SB:0D33
;   25    CALL P(P1,P2,P3,P4).
                       PUSH      #0XFFFF
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** CALL statement (  25)
                       PUSH      SB:0D30
                       PUSHA     SB:0D31
                       PUSH      #0X0000
;   26    FRY "P1 = ",P1,PEEL.
                       PUSHA     SB:0D32
                       PUSH      @SP:0D0
                       PUSHA     SB:0D33
                       PUSHFB    
                       CALL      P
                       POPFB     
                       DISCARD   #0D1
                       POP       @SP:0D1
                       DISCARD   #0D1
                       POP       @SP:0D1
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** PRINT statement (  26)
                       PUSHA     SB:0D34
                       SVC       #SVC_WRITE_STRING
;   27    FRY "P2 = ",P2,PEEL.
                       PUSH      SB:0D30
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  27)
                       PUSHA     SB:0D41
                       SVC       #SVC_WRITE_STRING
;   28    FRY "P3 = ",P3,PEEL.
                       PUSH      SB:0D31
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  28)
                       PUSHA     SB:0D48
                       SVC       #SVC_WRITE_STRING
;   29    FRY "P4 = ",P4,PEEL.
                       PUSH      SB:0D32
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** PRINT statement (  29)
                       PUSHA     SB:0D55
                       SVC       #SVC_WRITE_STRING
;   30 COOKEDPOTATO
                       PUSH      SB:0D33
                       SVC       #SVC_WRITE_BOOLEAN
;   31 
                       SVC       #SVC_WRITE_ENDL
                       RETURN    
; **** =========
; **** END (  30)
; **** =========

;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D62
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D80
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE

;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       RW        0D1                  ; x
                       RW        0D1                  ; y
                       DS        "Normal program termination"
                       DW                            ; P1
                       RW        0D1                  ; P2
                       RW        0D1                  ; P3
                       RW        0D1                  ; P4
                       DS        "P1 = "
                       DS        "P2 = "
                       DS        "P3 = "
                       DS        "P4 = "
                       DS        "Run-time error #"
                       DS        " near line #"

;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future POTATO syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words

;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
