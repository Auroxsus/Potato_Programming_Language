;--------------------------------------------------------------
; potato4.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 || Potato4.cpp by Auroxsus
;    2 || French Fry Productions
;    3 || Description: DO WHILE statement test
;    4 ||-----------------------------------------------------------
;    5 
;    6 POTATO
;    7    VAR x INT.
; **** =========
; **** PROGRAM module (   6)
; **** =========
PROGRAMMAIN            EQU       *
                       PUSH      #RUNTIMESTACK        ; set SP
                       POPSP     
                       PUSHA     STATICDATA           ; set SB
                       POPSB     
                       PUSH      #HEAPBASE            ; initialize heap
                       PUSH      #HEAPSIZE
                       SVC       #SVC_INITIALIZE_HEAP
                       CALL      PROGRAMBODY0010
                       PUSHA     SB:0D0
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D0                 ; terminate with status = 0
                       SVC       #SVC_TERMINATE

PROGRAMBODY0010        EQU       *
;    8    VAR y INT.
;    9 
;   10    DO
;   11       INPUT "x? " x.
; **** DO-WHILE statement (  10)
;   12    WHILE ( x <> 0 )
D0020                  EQU       *
; **** INPUT statement (  11)
                       PUSHA     SB:0D30
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D28
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
;   13       INPUT "y? " y.
                       PUSH      SB:0D28
                       PUSH      #0D0
                       CMPI      
                       JMPNE     T0040
                       PUSH      #0X0000
                       JMP       E0050
T0040                  PUSH      #0XFFFF
E0050                  EQU       *
;   14       IF   ( x < y ) 
                       SETT      
                       DISCARD   #0D1
                       JMPNT     E0030
; **** INPUT statement (  13)
                       PUSHA     SB:0D35
                       SVC       #SVC_WRITE_STRING
                       PUSHA     SB:0D29
                       SVC       #SVC_READ_INTEGER
                       POP       @SP:0D1
                       DISCARD   #0D1
; **** IF statement (  14)
                       PUSH      SB:0D28
;   15          fry "x  < y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPL      T0060
                       PUSH      #0X0000
                       JMP       E0070
T0060                  PUSH      #0XFFFF
E0070                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0090
; **** PRINT statement (  15)
;   16       ELIF ( x = y ) 
                       PUSHA     SB:0D40
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0080
I0090                  EQU       *
                       PUSH      SB:0D28
;   17          fry "x  = y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPE      T0100
                       PUSH      #0X0000
                       JMP       E0110
T0100                  PUSH      #0XFFFF
E0110                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0120
; **** PRINT statement (  17)
;   18       ELIF ( x > y ) 
                       PUSHA     SB:0D48
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
                       JMP       E0080
I0120                  EQU       *
                       PUSH      SB:0D28
;   19          fry "x  > y",PEEL.
                       PUSH      SB:0D29
                       CMPI      
                       JMPG      T0130
                       PUSH      #0X0000
                       JMP       E0140
T0130                  PUSH      #0XFFFF
E0140                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0150
; **** PRINT statement (  19)
;   20       COOKEDPOTATO
                       PUSHA     SB:0D56
                       SVC       #SVC_WRITE_STRING
;   21    COOKEDPOTATO
                       SVC       #SVC_WRITE_ENDL
;   22 COOKEDPOTATO
;   23 
                       JMP       E0080
I0150                  EQU       *
E0080                  EQU       *
                       JMP       D0020
E0030                  EQU       *
                       RETURN    
; **** =========
; **** END (  22)
; **** =========

;------------------------------------------------------------
; Issue "Run-time error #X..X near line #X..X" to handle run-time errors
;------------------------------------------------------------
HANDLERUNTIMEERROR     EQU       *
                       SVC       #SVC_WRITE_ENDL
                       PUSHA     SB:0D64
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       PUSHA     SB:0D82
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
                       PUSH      #0D1
                       SVC       #SVC_TERMINATE

;------------------------------------------------------------
; Static allocation of global data and PROGRAM module data
;------------------------------------------------------------
STATICDATA             EQU       *
                       DS        "Normal program termination"
                       RW        0D1                  ; x
                       RW        0D1                  ; y
                       DS        "x? "
                       DS        "y? "
                       DS        "x  < y"
                       DS        "x  = y"
                       DS        "x  > y"
                       DS        "Run-time error #"
                       DS        " near line #"

;------------------------------------------------------------
; Heap space for dynamic memory allocation (to support future POTATO syntax)
;------------------------------------------------------------
HEAPBASE               EQU       *
HEAPSIZE               EQU       0B0001000000000000   ; 8K bytes = 4K words

;------------------------------------------------------------
; Run-time stack
;------------------------------------------------------------
RUNTIMESTACK           EQU       0XFFFE
