;--------------------------------------------------------------
; Potato.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 || Potato.p by Auroxsus
;    2 || French Fry Productions
;    3 || Description: testing small function
;    4 ||-----------------------------------------------------------
;    5 
;    6 
;    7 VAR INT global.
;    8 
;    9 FUNCTION F: INT()
;   10    global = 1.                        || causes static semantic error!
; **** =========
; **** FUNCTION module (   9)
; **** =========
F                      EQU       *
                       PUSHSP                         ; set FUNCTION module FB = SP-on-entry + 2(n+3)
                       PUSH      #0D6                 ; n = 0
                       ADDI      
                       POPFB     
                       PUSHSP                         ; FUNCTION module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0010
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+3)
                       PUSH      #0D6
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0010         EQU       *
; statements in body of FUNCTION module (*MUST* execute RETURN)
; **** assignment statement (  10)
