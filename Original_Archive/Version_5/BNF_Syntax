
<potato program>        ::= <program definition> EOPC                           	|| ***SIMPLIFIED***
<program definition>    ::= potato                                            		|| ***SIMPLIFIED***           
								{ <statement> } .*
							cookedpotato		
<statemnent>			::= { <assertion> }*                         	     		|| ***SIMPLIFIED***
							((  
								<print statement>
							|	<input statement>                     		
							|	<assignment statement>                      			
							|	<if statement>                 			
							|	<do while statement>
							| 	<for statement>
							))
							{ <assertion> }*  
<assertion>				::= { <expression> }
<print statement>       ::= fry (( <string> | <expression> | \n | \t ))  .
							{ , {( <string> | <expression> | \n | \t )) }* 
<input statement>       ::= input [ <string> ] <variable> .
<assignment statement>  ::= <variable> { , <variable> }* = <expression> .
<string>	            ::= "{<ascii character>}*" | '{<ascii character>}*'
<input statement>       ::= input [ <string> ] <variable> .
<if statement>          ::= if ( <expression> ) 
								{ <statement> }*
							{ elif ( <expression> )
								{ <statement> }* ]
							[ else
								{ <statement> }* ]
							cookedpotato
<do while statement>    ::= do
								{ <statement> }*
							while ( <expression> )
								{ <statement> }*
							cookedpotato
<for statement>         ::= for (<assignment statement> <expression> <assignment statement> )
								{ <statement> }* 
							cookedpotato
<expression>		    ::= <conjunction> { (( OR | NOR | XOR )) <conjunction> } .
<conjunction>           ::= <negation> { (( AND | NAND )) <negation> }* .
<negation>              ::= [ NOT ] <comparison>			
<comparison>            ::= <comparator> [ (( < | <= | == | > | >= | (( <> | != )) )) <comparator> ]
<comparator>            ::= <term> { (( + | - )) <term> }*
<term>                  ::= <factor> { (( * | / | % )) <factor> }*
<factor>                ::= [ (( ABS | + | - )) ] <secondary>          				|| ***SIMPLIFIED***
<secondary>             ::= <prefix> [ (( ^ | ** )) <prefix> ]
<prefix>                ::= <primary> | (( ++ | -- )) <variable>
<primary>               ::= <literal> <variable> ( <expression> )               	|| ***SIMPLIFIED***
<variable>				::= <identifier>          							    	|| ***SIMPLIFIED***
<identifier>            ::= <letter> { (( <letter> | <digit> | _ )) }* 				|| ***SIMPLIFIED***
<literal>             	::= <integer> | <boolean> | <string>           				|| ***SIMPLIFIED***
<integer>             	::= <digit> { <digit> }*
<boolean>             	::= true | false
<string>              	::= "{ <ASCIICharacter> }*"                    				|| *Note* escape both \ and " with \
<digit>               	::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<acsii haracter>      	::= || Every printable ASCII character in range [ ' ','~' ]
<comment>             	::= || { <ASCIICharacter> }* EOLC               			|| single-line comment
					        |[ { (( <ASCIICharacter> | EOLC )) }* ]|   				|| multi-line (block) comment


NOTE: ***SIMPLIFIED*** means that the syntax is completed for the current version
	of the compiler and could be built on further in the development
	<primary> is simplified because there is no <variable> syntactic entry in POTATO

************* Only POTATO Version 4 *************
<statemnent>			::= <do2 while statement>  . 
						  | <while statement>  .
<do2 while statement>   ::= do2
								{ <statement> }*
							while ( <expression> )
<while statement>       ::= while ( <expression> )
								{ <statement> }* 
							cookedpotato
************* Only POTATO Version 5 *************
<for2 statement>        ::= <expression> to <expression> [ by <expression> ]
								{ <statement> }* 
							cookedpotato
<choose statement>      ::= choose [ (( ONE | ALL )) ]
								{ when <expression> : { <statement> }* }*
								[ else { <statement> }* ]
							cookedpotato