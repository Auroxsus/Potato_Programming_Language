;--------------------------------------------------------------
; Potato2.stm
;--------------------------------------------------------------
; SVC numbers
SVC_DONOTHING          EQU       0D0                  ; force context switch
SVC_TERMINATE          EQU       0D1
SVC_READ_INTEGER       EQU       0D10
SVC_WRITE_INTEGER      EQU       0D11
SVC_READ_FLOAT         EQU       0D20
SVC_WRITE_FLOAT        EQU       0D21
SVC_READ_BOOLEAN       EQU       0D30
SVC_WRITE_BOOLEAN      EQU       0D31
SVC_READ_CHARACTER     EQU       0D40
SVC_WRITE_CHARACTER    EQU       0D41
SVC_WRITE_ENDL         EQU       0D42
SVC_READ_STRING        EQU       0D50
SVC_WRITE_STRING       EQU       0D51
SVC_INITIALIZE_HEAP    EQU       0D90
SVC_ALLOCATE_BLOCK     EQU       0D91
SVC_DEALLOCATE_BLOCK   EQU       0D92

                       ORG       0X0000

                       JMP       PROGRAMMAIN
;    1 || Potato2.p by Auroxsus
;    2 || French Fry Productions
;    3 || Description: testing complex functions
;    4 ||-----------------------------------------------------------
;    5 
;    6 var int x, int y.
;    7 
;    8 function F0:int()
;    9    return( 1-1 ).
; **** =========
; **** FUNCTION module (   8)
; **** =========
F0                     EQU       *
                       PUSHSP                         ; set FUNCTION module FB = SP-on-entry + 2(n+3)
                       PUSH      #0D6                 ; n = 0
                       ADDI      
                       POPFB     
                       PUSHSP                         ; FUNCTION module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0010
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+3)
                       PUSH      #0D6
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0010         EQU       *
; statements in body of FUNCTION module (*MUST* execute RETURN)
; **** RETURN statement (   9)
                       PUSH      #0D1
;   10 cookedpotato
                       PUSH      #0D1
;   11 
;   12 function F1:int(IN int x)
                       SUBI      
                       POP       FB:0D0               ; pop RETURN expression into function return value
                       RETURN    
                       PUSH      #0D10
                       PUSH      #0D3
                       JMP       HANDLERUNTIMEERROR
; **** =========
; **** END (  10)
; **** =========
; **** =========
; **** FUNCTION module (  12)
; **** =========
F1                     EQU       *
;   13    var int y.
;   14 
;   15    y = x+1.
                       PUSHSP                         ; set FUNCTION module FB = SP-on-entry + 2(n+3)
                       PUSH      #0D8                 ; n = 1
                       ADDI      
                       POPFB     
                       PUSHSP                         ; FUNCTION module SP = SP-on-entry + 2m
                       PUSH      #0D2                 ; m = 1
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0020
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+3)
                       PUSH      #0D8
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0020         EQU       *
; statements in body of FUNCTION module (*MUST* execute RETURN)
; **** assignment statement (  15)
                       PUSHA     FB:0D4
;   16    return( y ).
                       PUSH      FB:0D1
                       PUSH      #0D1
                       ADDI      
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** RETURN statement (  16)
;   17 cookedpotato
                       PUSH      FB:0D4
;   18 
;   19 function F2:int(IN int x)
                       POP       FB:0D0               ; pop RETURN expression into function return value
                       RETURN    
                       PUSH      #0D17
                       PUSH      #0D3
                       JMP       HANDLERUNTIMEERROR
; **** =========
; **** END (  17)
; **** =========
; **** =========
; **** FUNCTION module (  19)
; **** =========
F2                     EQU       *
;   20    var int y.
;   21 
;   22    return( F0() + F1(x) ).
                       PUSHSP                         ; set FUNCTION module FB = SP-on-entry + 2(n+3)
                       PUSH      #0D8                 ; n = 1
                       ADDI      
                       POPFB     
                       PUSHSP                         ; FUNCTION module SP = SP-on-entry + 2m
                       PUSH      #0D2                 ; m = 1
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0030
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+3)
                       PUSH      #0D8
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0030         EQU       *
; statements in body of FUNCTION module (*MUST* execute RETURN)
; **** RETURN statement (  22)
                       PUSH      #0X0000              ; reserve space for function return value
                       PUSHFB    
                       CALL      F0
                       POPFB     
                       DISCARD   #0D0
                       PUSH      #0X0000              ; reserve space for function return value
;   23 cookedpotato
                       PUSH      FB:0D1
;   24 
;   25 function F3:int(int x)      || F3() is *recursive*
                       PUSHFB    
                       CALL      F1
                       POPFB     
                       DISCARD   #0D1
                       ADDI      
                       POP       FB:0D0               ; pop RETURN expression into function return value
                       RETURN    
                       PUSH      #0D23
                       PUSH      #0D3
                       JMP       HANDLERUNTIMEERROR
; **** =========
; **** END (  23)
; **** =========
; **** =========
; **** FUNCTION module (  25)
; **** =========
F3                     EQU       *
;   26    if ( x == 0 )
                       PUSHSP                         ; set FUNCTION module FB = SP-on-entry + 2(n+3)
                       PUSH      #0D8                 ; n = 1
                       ADDI      
                       POPFB     
                       PUSHSP                         ; FUNCTION module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0040
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+3)
                       PUSH      #0D8
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0040         EQU       *
; statements in body of FUNCTION module (*MUST* execute RETURN)
; **** IF statement (  26)
;   27       return( 1 ).
                       PUSH      FB:0D1
                       PUSH      #0D0
                       CMPI      
                       JMPE      T0050
                       PUSH      #0X0000
                       JMP       E0060
T0050                  PUSH      #0XFFFF
E0060                  EQU       *
                       SETT      
                       DISCARD   #0D1
                       JMPNT     I0080
; **** RETURN statement (  27)
;   28    else
                       PUSH      #0D1
;   29       return( 1 + F3(x-1) ).
                       POP       FB:0D0               ; pop RETURN expression into function return value
                       RETURN    
                       JMP       E0070
I0080                  EQU       *
; **** RETURN statement (  29)
                       PUSH      #0D1
                       PUSH      #0X0000              ; reserve space for function return value
                       PUSH      FB:0D1
;   30    cookedpotato
                       PUSH      #0D1
                       SUBI      
;   31 cookedpotato
                       PUSHFB    
                       CALL      F3
                       POPFB     
                       DISCARD   #0D1
                       ADDI      
                       POP       FB:0D0               ; pop RETURN expression into function return value
                       RETURN    
;   32 
;   33 function F4:int(int x1, int x2, int x3)
E0070                  EQU       *
                       PUSH      #0D31
                       PUSH      #0D3
                       JMP       HANDLERUNTIMEERROR
; **** =========
; **** END (  31)
; **** =========
; **** =========
; **** FUNCTION module (  33)
; **** =========
F4                     EQU       *
;   34    return( x1*x2*x3 ).
                       PUSHSP                         ; set FUNCTION module FB = SP-on-entry + 2(n+3)
                       PUSH      #0D12                ; n = 3
                       ADDI      
                       POPFB     
                       PUSHSP                         ; FUNCTION module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0090
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+3)
                       PUSH      #0D12
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0090         EQU       *
; statements in body of FUNCTION module (*MUST* execute RETURN)
; **** RETURN statement (  34)
                       PUSH      FB:0D1
                       PUSH      FB:0D2
;   35 cookedpotato
                       MULI      
                       PUSH      FB:0D3
;   36 
;   37 function F5:int(IN int x,IN int y)
                       MULI      
                       POP       FB:0D0               ; pop RETURN expression into function return value
                       RETURN    
                       PUSH      #0D35
                       PUSH      #0D3
                       JMP       HANDLERUNTIMEERROR
; **** =========
; **** END (  35)
; **** =========
; **** =========
; **** FUNCTION module (  37)
; **** =========
F5                     EQU       *
;   38    return( F3(x) + F2(y) ).
                       PUSHSP                         ; set FUNCTION module FB = SP-on-entry + 2(n+3)
                       PUSH      #0D10                ; n = 2
                       ADDI      
                       POPFB     
                       PUSHSP                         ; FUNCTION module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0100
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+3)
                       PUSH      #0D10
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0100         EQU       *
; statements in body of FUNCTION module (*MUST* execute RETURN)
; **** RETURN statement (  38)
                       PUSH      #0X0000              ; reserve space for function return value
                       PUSH      FB:0D1
                       PUSHFB    
                       CALL      F3
                       POPFB     
                       DISCARD   #0D1
                       PUSH      #0X0000              ; reserve space for function return value
;   39 cookedpotato
                       PUSH      FB:0D2
;   40 
;   41 procedure P1(IN int x1,OUT int x2,IO int x3,REF int x4)
                       PUSHFB    
                       CALL      F2
                       POPFB     
                       DISCARD   #0D1
                       ADDI      
                       POP       FB:0D0               ; pop RETURN expression into function return value
                       RETURN    
                       PUSH      #0D39
                       PUSH      #0D3
                       JMP       HANDLERUNTIMEERROR
; **** =========
; **** END (  39)
; **** =========
; **** =========
; **** PROCEDURE module (  41)
; **** =========
P1                     EQU       *
;   42    fry "P1",peel.
                       PUSHSP                         ; set PROCEDURE module FB = SP-on-entry + 2(n+2)
                       PUSH      #0D16                ; n = 6
                       ADDI      
                       POPFB     
                       PUSHSP                         ; PROCEDURE module SP = SP-on-entry + 2m
                       PUSH      #0D0                 ; m = 0
                       SUBI      
                       POPSP     
; statements to initialize frame data (if necessary)
                       CALL      MODULEBODY0110
                       PUSHFB                         ; restore caller's SP-on-entry = FB - 2(n+2)
                       PUSH      #0D16
                       SUBI      
                       POPSP     
                       RETURN                         ; return to caller

MODULEBODY0110         EQU       *
; statements in body of PROCEDURE module (may include RETURN)
; **** PRINT statement (  42)
;   43    x2 = F3(x1).   fry "x2=",x2,peel.
                       PUSHA     SB:0D2
                       SVC       #SVC_WRITE_STRING
                       SVC       #SVC_WRITE_ENDL
; **** assignment statement (  43)
                       PUSHA     FB:0D2
                       PUSH      #0X0000              ; reserve space for function return value
                       PUSH      FB:0D0
                       PUSHFB    
                       CALL      F3
                       POPFB     
                       DISCARD   #0D1
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** PRINT statement (  43)
                       PUSHA     SB:0D6
                       SVC       #SVC_WRITE_STRING
;   44    x3 = x3+x2+x4. fry "x3=",x3,peel.
                       PUSH      FB:0D2
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** assignment statement (  44)
                       PUSHA     FB:0D4
                       PUSH      FB:0D4
                       PUSH      FB:0D2
                       ADDI      
                       PUSH      @FB:0D5
                       ADDI      
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** PRINT statement (  44)
                       PUSHA     SB:0D11
                       SVC       #SVC_WRITE_STRING
;   45    x4 = x3.       fry "x4=",x4,peel.
                       PUSH      FB:0D4
                       SVC       #SVC_WRITE_INTEGER
                       SVC       #SVC_WRITE_ENDL
; **** assignment statement (  45)
                       PUSHA     @FB:0D5
                       PUSH      FB:0D4
                       MAKEDUP   
                       POP       @SP:0D2
                       SWAP      
                       DISCARD   #0D1
                       DISCARD   #0D1
; **** PRINT statement (  45)
                       PUSHA     SB:0D16
                       SVC       #SVC_WRITE_STRING
;   46 cookedpotato 
                       PUSH      @FB:0D5
                       SVC       #SVC_WRITE_INTEGER
;   47 
;   48 PROGRAM
                       SVC       #SVC_WRITE_ENDL
;   49    var int x, int i.
                       RETURN    

; **** =========
; **** END (  46)
; **** =========
